///////////////////////////////////////////////////////////////////////////////
// motive_interface_module.h
#pragma once

#include "motive_interfaceInterfaces.h"

#include "NatNetTypes.h"

#define MOTIVE_PORT_COMMAND 1510
#define MOTIVE_PORT_DATA MOTIVE_PORT_COMMAND

class Cmotive_interface_module
  : public ITComObject
  , public ITcADI
  , public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
	, public ITcIoUdpProtocolRecv
///</AutoGeneratedContent>
{
  public:
  DECLARE_IUNKNOWN()
  DECLARE_IPERSIST(CID_motive_interfaceCmotive_interface_module)
  DECLARE_ITCOMOBJECT_LOCKOP()
  DECLARE_ITCADI()
  DECLARE_ITCWATCHSOURCE()
  DECLARE_OBJPARAWATCH_MAP()
  DECLARE_OBJDATAAREA_MAP()

  Cmotive_interface_module();
  virtual	~Cmotive_interface_module();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

	// ITcIoUdpProtocolRecv
	virtual HRESULT TCOMAPI ReceiveData(ULONG ipAddr, USHORT udpDestPort, USHORT udpSrcPort, ULONG nData, PVOID pData, ETYPE_VLAN_HEADER* pVlan=0);

///</AutoGeneratedContent>

  void Unpack(char* pData);

  protected:
  DECLARE_ITCOMOBJECT_SETSTATE();

  HRESULT AddModuleToCaller();
  VOID RemoveModuleFromCaller();

  // Tracing
  CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	IPADDR m_MotiveAddress;
	motive_interface_moduleOutput m_Output;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
	ITcIoUdpProtocolPtr m_spUdpProt;
///</AutoGeneratedContent>

  UINT connection_timer;
  UINT keepalive_timer;
  bool connected;
};
