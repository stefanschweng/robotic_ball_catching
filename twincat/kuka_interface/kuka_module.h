///////////////////////////////////////////////////////////////////////////////
// kuka_module.h
#pragma once

#include "kuka_interfaceInterfaces.h"
#include "KsoeState.h"
#include "PDSParameters.h"
#include "MotionState.h"
#include "Robot.h"
#include "Robot1.h"
#include "AdsR0.h"
#include "MotionEnableLogic.h"

class Ckuka_module 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
	, public ITcPostCyclic
///</AutoGeneratedContent>
  , public CAdsR0FifoPort
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_kuka_interfaceCkuka_module)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	Ckuka_module();
	virtual	~Ckuka_module();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

	// ITcPostCyclic
	virtual HRESULT TCOMAPI PostCyclicUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

///</AutoGeneratedContent>

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();
  HRESULT InitDataPointer();
  VOID DeinitDataPointer();

	// Tracing
	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	typedef _TCOM_SMARTDATAPTR<matrix_7_real_T> matrix_7_real_TDataPtr;

	TcTraceLevel m_TraceLevelMax;
	double m_AxisVelocityLimit;
	double m_AxisMotorTorqueLimit;
	double m_AxisMotorTorqueSaturation;
	double m_AxisSensorTorqueLimit;
	double m_AxisPositionSoftReserve;
	bool m_RobotHanging;
	kuka_moduleInput m_Input;
	kuka_moduleRobot_Inputs m_Robot_Inputs;
	kuka_moduleOutput m_Output;
	kuka_moduleRobot_Sensors m_Robot_Sensors;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
	ITcRTimeTaskPtr m_spTask;
	ITcCyclicPtr m_spControllerFastCyclic;
	ITcPostCyclicPtr m_spControllerFastPostCyclic;
	ITcPostCyclicCallerInfoPtr m_spPostCyclicCaller;
	matrix_7_real_TDataPtr m_spfast_control_motor_torque;
	matrix_7_real_TDataPtr m_spfast_control_motor_enable;
	matrix_7_real_TDataPtr m_spfast_sensor_motor_torque_feedback;
	matrix_7_real_TDataPtr m_spfast_sensor_torque;
	matrix_7_real_TDataPtr m_spfast_sensor_position;
///</AutoGeneratedContent>

  AxisLimits limits;
  Robot *robot1;
  MotionEnableLogic motion_enable_logic;

  DWORD counter;

  LONGLONG dc_last;
};
