// ****************** Ccontroller_ballcatcher.h *******************************
// Generated by TwinCAT Target for MATLAB/Simulink (TE1400)
// MATLAB R2018b (win64)
// TwinCAT 3.1.4024
// TwinCAT Target 1.2.1237
// Beckhoff Automation GmbH & Co. KG     (www.beckhoff.com)
// *************************************************************

#pragma once

#include "rtwtypes.h"
#include "TcPch.h"
#include "TcMatSim.h"
#include "TcIoInterfaces.h"
#include "TcInterfaces.h"
#include "TcRtInterfaces.h"
#include "controller_ballcatcherInterfaces.h"
#include "controller_ballcatcher.h"

typedef TctModuleContextExecutionInfo controller_ballcatcherExecutionInfoArrType[1];








typedef struct{
	CLSID ClassId;
	unsigned int BuildTimeStamp;
	unsigned int ModelCheckSum[4];
	unsigned int ModelVersion[4];
	unsigned int TwinCatVersion[4];
	unsigned int TcTargetVersion[4];
	unsigned int MatlabVersion[4];
	unsigned int SimulinkVersion[4];
	unsigned int CoderVersion[4];
	GUID TcTargetLicenseId;
} TctModuleInfoType;

typedef struct{
	bool Debug;
} TctModuleBuildInfoType;


///////////////////////////////////////////////////////////////////////////////
// Module class
///////////////////////////////////////////////////////////////////////////////
class Ccontroller_ballcatcher:
  public ITcCyclic,
  public ITcPostCyclic,
  public ITcADI,
  public ITcWatchSource,
  public CTcMatSimModuleBase
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_controller_ballcatcher)
	DECLARE_ITCOMOBJECT_SETSTATE()
	DECLARE_PARA();

	Ccontroller_ballcatcher();
	~Ccontroller_ballcatcher();

	static int GetInstanceCnt();
	
	// ITcCyclic
	HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

	// ITcPostCyclic
	HRESULT TCOMAPI PostCyclicUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

	// ITcADI
	DECLARE_ITCADI();

	// ITcWatchSource
	DECLARE_ITCWATCHSOURCE();
	
	// parameters and signals
	bool m_CycleUpdateExecuted;
	TctModuleContextExecutionInfo m_ModuleExecutionInfo[1];
	TctModuleInfoType m_ModuleInfo;
	TctModuleBuildInfoType m_ModuleBuildInfo;
	RT_MODEL_controller_ballcatcher_T m_SimStruct;
	ExtU_controller_ballcatcher_T m_Input;
	ExtY_controller_ballcatcher_T m_Output;
	B_controller_ballcatcher_T m_BlockIO;
	P_controller_ballcatcher_T m_ModelParameters;
	DW_controller_ballcatcher_T m_DWork;
	RTWExtModeInfo m_controller_ballcatcher_47_rt_ExtModeInfo;
	DataTypeTransInfo m_controller_ballcatcher_117_dtInfo;

	
private:
	// interface pointer to the external mode server
	ITcMatSimExtModeServer* m_ipExtModeServer;

	// private methods
    DECLARE_OBJPARAWATCH_MAP();
    DECLARE_OBJDATAAREA_MAP();
	HRESULT InitMembers();
	HRESULT CheckAndAdaptCycleTimes();
	
	void controller_ballcatcher_iiwa_jacobian (const real_T q[7], real_T param_l__2, real_T param_l__3, real_T param_l__4, real_T param_l__5, real_T param_l__6, real_T param_l__7, real_T tmpreturn[42]);
	void controller_ballcatcher_iiwa_jacobian_p (const real_T q[7], const real_T q__p[7], real_T param_l__2, real_T param_l__3, real_T param_l__4, real_T param_l__5, real_T param_l__6, real_T param_l__7, real_T tmpreturn[42]);
	void controller_ballcatc_iiwa_reduced_inertia_matrix (const real_T q[7], const sJOJBOPbTZ83GtnQ5AHgMwC_controller_ballcatche_T *param, real_T tmpreturn[49]);
	void controller_ballcat_iiwa_reduced_coriolis_matrix (const real_T q[7], const real_T q__p[7], const sJOJBOPbTZ83GtnQ5AHgMwC_controller_ballcatche_T *param, real_T tmpreturn[49]);
	real_T rt_powd_snf (real_T u0, real_T u1);
	void controller_ballcatcher_mldivide_k (const real_T A[36], real_T B[6]);
	real_T controller_ballcatcher_polyval (const real_T p_data[], const int32_T p_size[2], real_T x);
	void controller_ballcatcher_polyder (const real_T u_data[], const int32_T u_size[2], real_T a_data[], int32_T a_size[2]);
	boolean_T controller_ballcatcher_anyNonFinite (const creal_T x_data[], const int32_T x_size[2]);
	real_T rt_hypotd_snf (real_T u0, real_T u1);
	void controller_ballcatcher_sqrt (creal_T *x);
	void controller_ballcatcher_xzlartg_b (const creal_T f, const creal_T g, real_T *cs, creal_T *sn);
	void controller_ballcatcher_xzlartg (const creal_T f, const creal_T g, real_T *cs, creal_T *sn, creal_T *r);
	void controller_ballcatcher_xzhgeqz (const creal_T A_data[], const int32_T A_size[2], int32_T ilo, int32_T ihi, int32_T *info, creal_T alpha1_data[], int32_T *alpha1_size, creal_T beta1_data[], int32_T *beta1_size);
	void controller_ballcatcher_xzgeev (const creal_T A_data[], const int32_T A_size[2], int32_T *info, creal_T alpha1_data[], int32_T *alpha1_size, creal_T beta1_data[], int32_T *beta1_size);
	real_T controller_ballcatcher_xdlapy3 (real_T x1, real_T x2, real_T x3);
	creal_T controller_ballcatcher_recip (const creal_T y);
	void controller_ballcatcher_xgehrd (creal_T a_data[], int32_T a_size[2]);
	void controller_ballcatcher_xscal_k (int32_T n, const creal_T a, creal_T x_data[], int32_T ix0, int32_T incx);
	void controller_ballcatcher_xscal (int32_T n, const creal_T a, creal_T x_data[], int32_T ix0);
	creal_T controller_ballcatcher_xzlarfg (creal_T *alpha1, creal_T *x);
	int32_T controller_ballcatcher_xhseqr (creal_T h_data[], int32_T h_size[2]);
	void controller_ballcatcher_roots (const real_T c_data[], const int32_T c_size[2], creal_T r_data[], int32_T *r_size);
	void controller_ballcatcher_power (const real_T a_data[], const int32_T *a_size, real_T y_data[], int32_T *y_size);
	void controller_ballcatcher_mldivide (const real_T A[49], real_T B[7]);
	void controller_ballcatcher_output (void);
	void controller_ballcatcher_update (void);
	void controller_ballcatcher_initialize (void);
	void controller_ballcatcher_terminate (void);
	void MdlOutputs (int_T tid);
	void MdlUpdate (int_T tid);
	void MdlInitializeSizes (void);
	void MdlInitializeSampleTimes (void);
	void MdlInitialize (void);
	void MdlStart (void);
	void MdlTerminate (void);
	RT_MODEL_controller_ballcatcher_T* controller_ballcatcher (void);
	real_T rtGetInf (void);
	real32_T rtGetInfF (void);
	real_T rtGetMinusInf (void);
	real32_T rtGetMinusInfF (void);
	real_T rtGetNaN (void);
	real32_T rtGetNaNF (void);
	void rt_InitInfAndNaN (size_t realSize);
	boolean_T rtIsInf (real_T value);
	boolean_T rtIsInfF (real32_T value);
	boolean_T rtIsNaN (real_T value);
	boolean_T rtIsNaNF (real32_T value);


	// static members
	static int _InstanceCnt;

};
