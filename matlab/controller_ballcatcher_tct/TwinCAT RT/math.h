// ****************** math.h *******************************
// Generated by TwinCAT Target for MATLAB/Simulink (TE1400)
// MATLAB R2017b (win64)
// TwinCAT 3.1.4022
// TwinCAT Target 1.2.1235
// Beckhoff Automation GmbH & Co. KG     (www.beckhoff.com)
// *************************************************************
#pragma once

#if defined TC_BUILD && TC_BUILD>4020
	#include "TcMath.h"
#else
#ifdef IS_R0
	#include "crtdefs.h"
	#include "Fpu87.h"
	
	#ifdef sqr
		#undef	sqr
	#endif
	#ifdef sqrt
		#undef sqrt
	#endif
	#ifdef sin
		#undef sin
	#endif
	#ifdef cos
		#undef cos
	#endif
	#ifdef sincos
		#undef sincos
	#endif
	#ifdef tan
		#undef tan
	#endif
	#ifdef atan
		#undef atan
	#endif
	#ifdef atan2
		#undef atan2
	#endif
	#ifdef asin
		#undef asin
	#endif
	#ifdef acos
		#undef acos
	#endif
	#ifdef pow
		#undef pow
	#endif
	#ifdef exp
		#undef exp
	#endif
	#ifdef sinh
		#undef sinh
	#endif
	#ifdef cosh
		#undef cosh
	#endif
	#ifdef tanh
		#undef tanh
	#endif
	#ifdef log
		#undef log
	#endif
	#ifdef log10
		#undef log10
	#endif
	#ifdef fabs
		#undef	fabs
	#endif
	#ifdef fmod
		#undef fmod
	#endif
	#ifdef modf
		#undef modf
	#endif
	#ifdef ceil
		#undef ceil
	#endif
	#ifdef floor
		#undef floor
	#endif
	#ifdef _finite
		#undef _finite
	#endif

#ifdef __cplusplus
	inline	double	_cdecl	sqr(double x) {return sqr_(x);}
	inline	double	_cdecl	sqrt(double x) {return sqrt_(x);}
	inline	double	_cdecl	sin(double x) {return sin_(x);}
	inline	double	_cdecl	cos(double	x) {return cos_(x);}
	inline	double	_cdecl	tan(double x) {return tan_(x);}
	inline	double	_cdecl	atan(double x) {return atan_(x);}
	inline	double	_cdecl	atan2(double y, double x) {return atan2_(y,x);}
	inline	double	_cdecl	asin(double x) {return asin_(x);}
	inline	double	_cdecl	acos(double x) {return acos_(x);}
	inline	double	_cdecl	exp(double x) {return exp_(x);}
	inline	double	_cdecl	log(double x) {return log_(x);}	
	inline	double	_cdecl	log10(double x) {return log10_(x);}
	inline	double	_cdecl	sinh(double x) {return sinh_(x);}
	inline	double	_cdecl	cosh(double x) {return cosh_(x);}
	inline	double	_cdecl	tanh(double x) {return tanh_(x);}
	inline	double	_cdecl	fabs(double x) {return fabs_(x);}
	inline	double	_cdecl	fmod(double x, double y) {return fmod_(x,y);}
	inline	double	_cdecl	fmodabs(double x, double y) {return fmodabs_(x,y);}
	inline	double	_cdecl	modf(double x, double* y) {return modf_(x,y);}
	inline	double	_cdecl	ceil(double x) {return ceil_(x);}
	inline	double	_cdecl	floor(double x) {return floor_(x);}
	inline	double	_cdecl	pow(double x, double y) {return pow_(x,y);}
	inline	void	_cdecl	sincos(double ang, double* sinval, double* cosval) {return sincos_(ang,sinval,cosval);} 
	inline	double	_cdecl	cubic(double x) {return cubic_(x);}
	inline	short	_cdecl	rands(long *holdrand) {return rands_(holdrand);}
	inline	int		_cdecl	finite(double x) {return finite_(x);}		
	inline	double	_cdecl	round(double x) {return round_(x);}
	inline	double	_cdecl	round_digits(double x, int digits) {return round_digits_(x,digits);}
	inline	double	_cdecl	ldexp(double x, int exp) {return ldexp_(x,exp);}
	inline	float	_cdecl	ldexpf(float x, int exp) {return ldexpf_(x,exp);}
	
	inline double frexp (double x,int *exp)
	{
	  const int mLength = 52;
	  const signed __int64 bias = 0x3FF;
	  const signed __int64 mMask = 0x800FFFFFFFFFFFFF;
	  const signed __int64 eMask = ~mMask;
	  union double_int64 {double value;__int64 intValue;} infinity,returnValue,exponent;
	  // define inf
	  infinity.intValue = eMask;//0x7FF0000000000000;
	  // check inf and nan
	  if (x!=x || x==infinity.value || x==-infinity.value) return x;
	  // calculate return value
	  returnValue.value = x;
	  returnValue.intValue = (returnValue.intValue & mMask) | (bias<<mLength);
	  // calculate exponent
	  exponent.value = x;
	  exponent.intValue = ((exponent.intValue & eMask) >> mLength) - bias;
	  *exp = (int)exponent.intValue;
	  return returnValue.value;
	}

	inline float frexp (float x,int *exp)
	{
	  const int mLength = 23;
	  const signed __int32 bias = 0x7F;
	  const signed __int32 mMask = 0x807FFFFF;
	  const signed __int32 eMask = ~mMask;
	  union float_int32 {float value;__int32 intValue;} infinity,returnValue,exponent;
	  // define inf
	  infinity.intValue = eMask;//0x7F800000;
	  // check inf and nan
	  if (x!=x || x==infinity.value || x==-infinity.value) return x;
	  // calculate return value
	  returnValue.value = x;
	  returnValue.intValue = (returnValue.intValue & mMask) | (bias<<mLength);
	  // calculate exponent
	  exponent.value = x;
	  exponent.intValue = ((exponent.intValue & eMask) >> mLength) - bias;
	  *exp = (int)exponent.intValue;
	  return returnValue.value;
	}

#else
#pragma warning( disable : 4005 ) //disable warnings on redefinitions
	#define sqr                            sqr_
	#define sqrt                           sqrt_
	#define sin                            sin_
	#define cos                            cos_
	#define tan                            tan_
	#define atan                           atan_
	#define atan2                          atan2_
	#define asin                           asin_
	#define acos                           acos_
	#define exp                            exp_
	#define log                            log_
	#define log10                          log10_
	#define sinh                           sinh_
	#define cosh                           cosh_
	#define tanh                           tanh_
	#define fabs                           fabs_
	#define fmod                           fmod_
	#define fmodabs                        fmodabs_
	#define modf                           modf_
	#define ceil                           ceil_
	#define floor                          floor_
	#define pow                            pow_
	#define sincos                         sincos_
	#define cubic                          cubic_
	#define rands                          rands_
	#define finite                         finite_
	#define round                          round_
	#define round_digits                   round_digits_
	#define cubic                          cubic_
	#define ldexp                          ldexp_
	#define ldexpf                         ldexpf_

#pragma warning( default : 4005 ) //enable warnings on redefinitions

#endif // #ifdef __cplusplus
#endif // #ifdef IS_R0
#endif // #if defined TC_BUILD && TC_BUILD>4020
