// ****************** Ccontroller_ballcatcher_inv_kin.h *******************************
// Generated by TwinCAT Target for MATLAB/Simulink (TE1400)
// MATLAB R2018b (win64)
// TwinCAT 3.1.4024
// TwinCAT Target 1.2.1237
// Beckhoff Automation GmbH & Co. KG     (www.beckhoff.com)
// *************************************************************

#pragma once

#include "rtwtypes.h"
#include "TcPch.h"
#include "TcMatSim.h"
#include "TcIoInterfaces.h"
#include "TcInterfaces.h"
#include "TcRtInterfaces.h"
#include "controller_ballcatcher_inv_kinInterfaces.h"
#include "controller_ballcatcher_inv_kin.h"

typedef TctModuleContextExecutionInfo controller_ballcatcher_inv_kinExecutionInfoArrType[1];








typedef struct{
	CLSID ClassId;
	unsigned int BuildTimeStamp;
	unsigned int ModelCheckSum[4];
	unsigned int ModelVersion[4];
	unsigned int TwinCatVersion[4];
	unsigned int TcTargetVersion[4];
	unsigned int MatlabVersion[4];
	unsigned int SimulinkVersion[4];
	unsigned int CoderVersion[4];
	GUID TcTargetLicenseId;
} TctModuleInfoType;

typedef struct{
	bool Debug;
} TctModuleBuildInfoType;


///////////////////////////////////////////////////////////////////////////////
// Module class
///////////////////////////////////////////////////////////////////////////////
class Ccontroller_ballcatcher_inv_kin:
  public ITcCyclic,
  public ITcPostCyclic,
  public ITcADI,
  public ITcWatchSource,
  public CTcMatSimModuleBase
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_controller_ballcatcher_inv_kin)
	DECLARE_ITCOMOBJECT_SETSTATE()
	DECLARE_PARA();

	Ccontroller_ballcatcher_inv_kin();
	~Ccontroller_ballcatcher_inv_kin();

	static int GetInstanceCnt();
	
	// ITcCyclic
	HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

	// ITcPostCyclic
	HRESULT TCOMAPI PostCyclicUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

	// ITcADI
	DECLARE_ITCADI();

	// ITcWatchSource
	DECLARE_ITCWATCHSOURCE();
	
	// parameters and signals
	bool m_CycleUpdateExecuted;
	TctModuleContextExecutionInfo m_ModuleExecutionInfo[1];
	TctModuleInfoType m_ModuleInfo;
	TctModuleBuildInfoType m_ModuleBuildInfo;
	RT_MODEL_controller_ballcatcher_inv_kin_T m_SimStruct;
	ExtU_controller_ballcatcher_inv_kin_T m_Input;
	ExtY_controller_ballcatcher_inv_kin_T m_Output;
	B_controller_ballcatcher_inv_kin_T m_BlockIO;
	P_controller_ballcatcher_inv_kin_T m_ModelParameters;
	DW_controller_ballcatcher_inv_kin_T m_DWork;
	RTWExtModeInfo m_controller_ballcatcher_inv_kin_58_rt_ExtModeInfo;
	DataTypeTransInfo m_controller_ballcatcher_inv_kin_123_dtInfo;

	
private:
	// interface pointer to the external mode server
	ITcMatSimExtModeServer* m_ipExtModeServer;

	// private methods
    DECLARE_OBJPARAWATCH_MAP();
    DECLARE_OBJDATAAREA_MAP();
	HRESULT InitMembers();
	HRESULT CheckAndAdaptCycleTimes();
	
	void rate_scheduler (void);
	boolean_T controller_ballcatcher_inv_kin_isequal (const real_T varargin_1 [3], const real_T varargin_2[3]);
	void controller_ballcatcher_inv_ki_estimate_parabola (real_T t_in, const real_T point_in[3], const struct_3PKqMdhV3cqvODbHdLwLIG *b_estimator_init_struct, real_T init, sDzCfTiIapKTB3mCVdDRUZC_controller_ballcatche_T *estimations, real_T *prediction_update);
	void controller_ballcatcher_inv_kin_iiwa_jacobian (const real_T q[7], real_T param_l__2, real_T param_l__3, real_T param_l__4, real_T param_l__5, real_T param_l__6, real_T param_l__7, real_T tmpreturn[42]);
	void controller_ballcatcher_inv_kin_iiwa_jacobian_p (const real_T q[7], const real_T q__p[7], real_T param_l__2, real_T param_l__3, real_T param_l__4, real_T param_l__5, real_T param_l__6, real_T param_l__7, real_T tmpreturn[42]);
	void controller_ballcatc_iiwa_reduced_inertia_matrix (const real_T q[7], const sJOJBOPbTZ83GtnQ5AHgMwC_controller_ballcatche_T *param, real_T tmpreturn[49]);
	void controller_ballcat_iiwa_reduced_coriolis_matrix (const real_T q[7], const real_T q__p[7], const sJOJBOPbTZ83GtnQ5AHgMwC_controller_ballcatche_T *param, real_T tmpreturn[49]);
	real_T controller_ballcatcher_inv_kin_norm (const real_T x[3]);
	void controller_ballcatcher_inv_kin_mldivide (const real_T A[16], real_T B[16]);
	real_T rt_atan2d_snf (real_T u0, real_T u1);
	void controller_ballcatcher_inv_kin_skew (const real_T v[3], real_T S[9]);
	void controller_ballcatcher_inv_kin_mod (const real_T x_data[], const int32_T *x_size, real_T r_data[], int32_T *r_size);
	void controller_ballcatcher_inv_kin_wrap_f (real_T lambda[7]);
	boolean_T controller_ballcatcher_inv_kin_all_a (const boolean_T x[7]);
	void controller_ballcatcher_inv_kin_atan2 (const real_T y[17], const real_T x[17], real_T r[17]);
	void controller_ballcatcher_inv_kin_abs (const real_T x[17], real_T y[17]);
	void controller_ballcatcher_inv_kin_all (const boolean_T x[34], boolean_T y[17]);
	void controller_ballcatcher_inv_kin_acos (real_T x_data[], int32_T x_size [2]);
	void controller_ballcatcher_inv_kin_wrap (real_T lambda_data[], int32_T *lambda_size);
	real_T controller_ballcatcher_inv_kin_vecnorm (const real_T x[7]);
	void controller__inverse_kinematics_analytic_schweng (const real_T x_d[16], const struct_eTge8mk2lBOxrrglSbzX9G *param, boolean_T find_minimum_norm, const real_T current_q[7], boolean_T *success, real_T q[7], int32_T all_solutions_size[2]);
	void controller_ballcatcher_inv_kin_output (void);
	void controller_ballcatcher_inv_kin_update (void);
	void controller_ballcatcher_inv_kin_initialize (void);
	void controller_ballcatcher_inv_kin_terminate (void);
	void MdlOutputs (int_T tid);
	void MdlUpdate (int_T tid);
	void MdlInitializeSizes (void);
	void MdlInitializeSampleTimes (void);
	void MdlInitialize (void);
	void MdlStart (void);
	void MdlTerminate (void);
	RT_MODEL_controller_ballcatcher_inv_kin_T* controller_ballcatcher_inv_kin (void);
	real_T rtGetInf (void);
	real32_T rtGetInfF (void);
	real_T rtGetMinusInf (void);
	real32_T rtGetMinusInfF (void);
	real_T rtGetNaN (void);
	real32_T rtGetNaNF (void);
	void rt_InitInfAndNaN (size_t realSize);
	boolean_T rtIsInf (real_T value);
	boolean_T rtIsInfF (real32_T value);
	boolean_T rtIsNaN (real_T value);
	boolean_T rtIsNaNF (real32_T value);
	int_T rt_CallSys (SimStruct *S, int_T element, int_T tid);
	int_T rt_EnableSys (SimStruct *S, int_T element, int_T tid);
	int_T rt_DisableSys (SimStruct *S, int_T element, int_T tid);


	// static members
	static int _InstanceCnt;

};
