// ****************** controller_ballcatcher_inv_kin.h *******************************
// Generated by TwinCAT Target for MATLAB/Simulink (TE1400)
// MATLAB R2018b (win64)
// TwinCAT 3.1.4024
// TwinCAT Target 1.2.1237
// Beckhoff Automation GmbH & Co. KG     (www.beckhoff.com)
// *************************************************************
/*
 * controller_ballcatcher_inv_kin.h
 *
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * Code generation for model "controller_ballcatcher_inv_kin".
 *
 * Model version              : 1.3680
 * Simulink Coder version : 9.0 (R2018b) 24-May-2018
 * C++ source code generated on : Tue Oct 13 22:13:19 2020
 *
 * Target selection: TwinCAT.tlc
 * Note: GRT includes extra infrastructure and instrumentation for prototyping
 * Embedded hardware selection: Intel->x86-64 (Windows64)
 * Code generation objective: Debugging
 * Validation result: Not run
 */

#ifndef RTW_HEADER_controller_ballcatcher_inv_kin_h_
#define RTW_HEADER_controller_ballcatcher_inv_kin_h_
#include <stddef.h>
#include <string.h>
#include <cmath>
#include <math.h>
#ifndef controller_ballcatcher_inv_kin_COMMON_INCLUDES_
# define controller_ballcatcher_inv_kin_COMMON_INCLUDES_
#include "rtwtypes.h"
#include "zero_crossing_types.h"
#include "simstruc.h"
#include "fixedpoint.h"
#include "dt_info.h"
#include "ext_work.h"
#endif                                 /* controller_ballcatcher_inv_kin_COMMON_INCLUDES_ */

#include "controller_ballcatcher_inv_kin_types.h"

/* Shared type includes */
#include "multiword_types.h"
#include "rtGetNaN.h"
#include "rt_nonfinite.h"
#include "rt_defines.h"
#include "rt_sfcn_helper.h"

/* Macros for accessing real-time model data structure */
#ifndef rtmGetBlockIO
# define rtmGetBlockIO(rtm)            ((rtm)->blockIO)
#endif

#ifndef rtmSetBlockIO
# define rtmSetBlockIO(rtm, val)       ((rtm)->blockIO = (val))
#endif

#ifndef rtmGetChecksums
# define rtmGetChecksums(rtm)          ((rtm)->Sizes.checksums)
#endif

#ifndef rtmSetChecksums
# define rtmSetChecksums(rtm, val)     ((rtm)->Sizes.checksums = (val))
#endif

#ifndef rtmGetConstBlockIO
# define rtmGetConstBlockIO(rtm)       ((rtm)->constBlockIO)
#endif

#ifndef rtmSetConstBlockIO
# define rtmSetConstBlockIO(rtm, val)  ((rtm)->constBlockIO = (val))
#endif

#ifndef rtmGetContStateDisabled
# define rtmGetContStateDisabled(rtm)  ((rtm)->contStateDisabled)
#endif

#ifndef rtmSetContStateDisabled
# define rtmSetContStateDisabled(rtm, val) ((rtm)->contStateDisabled = (val))
#endif

#ifndef rtmGetContStates
# define rtmGetContStates(rtm)         ((rtm)->contStates)
#endif

#ifndef rtmSetContStates
# define rtmSetContStates(rtm, val)    ((rtm)->contStates = (val))
#endif

#ifndef rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag
# define rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm) ((rtm)->CTOutputIncnstWithState)
#endif

#ifndef rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag
# define rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm, val) ((rtm)->CTOutputIncnstWithState = (val))
#endif

#ifndef rtmGetCtrlRateMdlRefTiming
# define rtmGetCtrlRateMdlRefTiming(rtm) ()
#endif

#ifndef rtmSetCtrlRateMdlRefTiming
# define rtmSetCtrlRateMdlRefTiming(rtm, val) ()
#endif

#ifndef rtmGetCtrlRateMdlRefTimingPtr
# define rtmGetCtrlRateMdlRefTimingPtr(rtm) ()
#endif

#ifndef rtmSetCtrlRateMdlRefTimingPtr
# define rtmSetCtrlRateMdlRefTimingPtr(rtm, val) ()
#endif

#ifndef rtmGetCtrlRateNumTicksToNextHit
# define rtmGetCtrlRateNumTicksToNextHit(rtm) ()
#endif

#ifndef rtmSetCtrlRateNumTicksToNextHit
# define rtmSetCtrlRateNumTicksToNextHit(rtm, val) ()
#endif

#ifndef rtmGetDataMapInfo
# define rtmGetDataMapInfo(rtm)        ()
#endif

#ifndef rtmSetDataMapInfo
# define rtmSetDataMapInfo(rtm, val)   ()
#endif

#ifndef rtmGetDefaultParam
# define rtmGetDefaultParam(rtm)       ((rtm)->defaultParam)
#endif

#ifndef rtmSetDefaultParam
# define rtmSetDefaultParam(rtm, val)  ((rtm)->defaultParam = (val))
#endif

#ifndef rtmGetDerivCacheNeedsReset
# define rtmGetDerivCacheNeedsReset(rtm) ((rtm)->derivCacheNeedsReset)
#endif

#ifndef rtmSetDerivCacheNeedsReset
# define rtmSetDerivCacheNeedsReset(rtm, val) ((rtm)->derivCacheNeedsReset = (val))
#endif

#ifndef rtmGetDirectFeedThrough
# define rtmGetDirectFeedThrough(rtm)  ((rtm)->Sizes.sysDirFeedThru)
#endif

#ifndef rtmSetDirectFeedThrough
# define rtmSetDirectFeedThrough(rtm, val) ((rtm)->Sizes.sysDirFeedThru = (val))
#endif

#ifndef rtmGetErrorStatusFlag
# define rtmGetErrorStatusFlag(rtm)    ((rtm)->errorStatus)
#endif

#ifndef rtmSetErrorStatusFlag
# define rtmSetErrorStatusFlag(rtm, val) ((rtm)->errorStatus = (val))
#endif

#ifndef rtmGetFinalTime
# define rtmGetFinalTime(rtm)          ((rtm)->Timing.tFinal)
#endif

#ifndef rtmSetFinalTime
# define rtmSetFinalTime(rtm, val)     ((rtm)->Timing.tFinal = (val))
#endif

#ifndef rtmGetFirstInitCondFlag
# define rtmGetFirstInitCondFlag(rtm)  ()
#endif

#ifndef rtmSetFirstInitCondFlag
# define rtmSetFirstInitCondFlag(rtm, val) ()
#endif

#ifndef rtmGetIntgData
# define rtmGetIntgData(rtm)           ()
#endif

#ifndef rtmSetIntgData
# define rtmSetIntgData(rtm, val)      ()
#endif

#ifndef rtmGetMdlRefGlobalTID
# define rtmGetMdlRefGlobalTID(rtm)    ()
#endif

#ifndef rtmSetMdlRefGlobalTID
# define rtmSetMdlRefGlobalTID(rtm, val) ()
#endif

#ifndef rtmGetMdlRefTriggerTID
# define rtmGetMdlRefTriggerTID(rtm)   ()
#endif

#ifndef rtmSetMdlRefTriggerTID
# define rtmSetMdlRefTriggerTID(rtm, val) ()
#endif

#ifndef rtmGetModelMappingInfo
# define rtmGetModelMappingInfo(rtm)   ((rtm)->SpecialInfo.mappingInfo)
#endif

#ifndef rtmSetModelMappingInfo
# define rtmSetModelMappingInfo(rtm, val) ((rtm)->SpecialInfo.mappingInfo = (val))
#endif

#ifndef rtmGetModelName
# define rtmGetModelName(rtm)          ((rtm)->modelName)
#endif

#ifndef rtmSetModelName
# define rtmSetModelName(rtm, val)     ((rtm)->modelName = (val))
#endif

#ifndef rtmGetNonInlinedSFcns
# define rtmGetNonInlinedSFcns(rtm)    ((rtm)->NonInlinedSFcns)
#endif

#ifndef rtmSetNonInlinedSFcns
# define rtmSetNonInlinedSFcns(rtm, val) ((rtm)->NonInlinedSFcns = (val))
#endif

#ifndef rtmGetNumBlockIO
# define rtmGetNumBlockIO(rtm)         ((rtm)->Sizes.numBlockIO)
#endif

#ifndef rtmSetNumBlockIO
# define rtmSetNumBlockIO(rtm, val)    ((rtm)->Sizes.numBlockIO = (val))
#endif

#ifndef rtmGetNumBlockParams
# define rtmGetNumBlockParams(rtm)     ((rtm)->Sizes.numBlockPrms)
#endif

#ifndef rtmSetNumBlockParams
# define rtmSetNumBlockParams(rtm, val) ((rtm)->Sizes.numBlockPrms = (val))
#endif

#ifndef rtmGetNumBlocks
# define rtmGetNumBlocks(rtm)          ((rtm)->Sizes.numBlocks)
#endif

#ifndef rtmSetNumBlocks
# define rtmSetNumBlocks(rtm, val)     ((rtm)->Sizes.numBlocks = (val))
#endif

#ifndef rtmGetNumContStates
# define rtmGetNumContStates(rtm)      ((rtm)->Sizes.numContStates)
#endif

#ifndef rtmSetNumContStates
# define rtmSetNumContStates(rtm, val) ((rtm)->Sizes.numContStates = (val))
#endif

#ifndef rtmGetNumDWork
# define rtmGetNumDWork(rtm)           ((rtm)->Sizes.numDwork)
#endif

#ifndef rtmSetNumDWork
# define rtmSetNumDWork(rtm, val)      ((rtm)->Sizes.numDwork = (val))
#endif

#ifndef rtmGetNumInputPorts
# define rtmGetNumInputPorts(rtm)      ((rtm)->Sizes.numIports)
#endif

#ifndef rtmSetNumInputPorts
# define rtmSetNumInputPorts(rtm, val) ((rtm)->Sizes.numIports = (val))
#endif

#ifndef rtmGetNumNonSampledZCs
# define rtmGetNumNonSampledZCs(rtm)   ((rtm)->Sizes.numNonSampZCs)
#endif

#ifndef rtmSetNumNonSampledZCs
# define rtmSetNumNonSampledZCs(rtm, val) ((rtm)->Sizes.numNonSampZCs = (val))
#endif

#ifndef rtmGetNumOutputPorts
# define rtmGetNumOutputPorts(rtm)     ((rtm)->Sizes.numOports)
#endif

#ifndef rtmSetNumOutputPorts
# define rtmSetNumOutputPorts(rtm, val) ((rtm)->Sizes.numOports = (val))
#endif

#ifndef rtmGetNumPeriodicContStates
# define rtmGetNumPeriodicContStates(rtm) ((rtm)->Sizes.numPeriodicContStates)
#endif

#ifndef rtmSetNumPeriodicContStates
# define rtmSetNumPeriodicContStates(rtm, val) ((rtm)->Sizes.numPeriodicContStates = (val))
#endif

#ifndef rtmGetNumSFcnParams
# define rtmGetNumSFcnParams(rtm)      ((rtm)->Sizes.numSFcnPrms)
#endif

#ifndef rtmSetNumSFcnParams
# define rtmSetNumSFcnParams(rtm, val) ((rtm)->Sizes.numSFcnPrms = (val))
#endif

#ifndef rtmGetNumSFunctions
# define rtmGetNumSFunctions(rtm)      ((rtm)->Sizes.numSFcns)
#endif

#ifndef rtmSetNumSFunctions
# define rtmSetNumSFunctions(rtm, val) ((rtm)->Sizes.numSFcns = (val))
#endif

#ifndef rtmGetNumSampleTimes
# define rtmGetNumSampleTimes(rtm)     ((rtm)->Sizes.numSampTimes)
#endif

#ifndef rtmSetNumSampleTimes
# define rtmSetNumSampleTimes(rtm, val) ((rtm)->Sizes.numSampTimes = (val))
#endif

#ifndef rtmGetNumU
# define rtmGetNumU(rtm)               ((rtm)->Sizes.numU)
#endif

#ifndef rtmSetNumU
# define rtmSetNumU(rtm, val)          ((rtm)->Sizes.numU = (val))
#endif

#ifndef rtmGetNumY
# define rtmGetNumY(rtm)               ((rtm)->Sizes.numY)
#endif

#ifndef rtmSetNumY
# define rtmSetNumY(rtm, val)          ((rtm)->Sizes.numY = (val))
#endif

#ifndef rtmGetOdeF
# define rtmGetOdeF(rtm)               ()
#endif

#ifndef rtmSetOdeF
# define rtmSetOdeF(rtm, val)          ()
#endif

#ifndef rtmGetOdeY
# define rtmGetOdeY(rtm)               ()
#endif

#ifndef rtmSetOdeY
# define rtmSetOdeY(rtm, val)          ()
#endif

#ifndef rtmGetOffsetTimeArray
# define rtmGetOffsetTimeArray(rtm)    ((rtm)->Timing.offsetTimesArray)
#endif

#ifndef rtmSetOffsetTimeArray
# define rtmSetOffsetTimeArray(rtm, val) ((rtm)->Timing.offsetTimesArray = (val))
#endif

#ifndef rtmGetOffsetTimePtr
# define rtmGetOffsetTimePtr(rtm)      ((rtm)->Timing.offsetTimes)
#endif

#ifndef rtmSetOffsetTimePtr
# define rtmSetOffsetTimePtr(rtm, val) ((rtm)->Timing.offsetTimes = (val))
#endif

#ifndef rtmGetOptions
# define rtmGetOptions(rtm)            ((rtm)->Sizes.options)
#endif

#ifndef rtmSetOptions
# define rtmSetOptions(rtm, val)       ((rtm)->Sizes.options = (val))
#endif

#ifndef rtmGetParamIsMalloced
# define rtmGetParamIsMalloced(rtm)    ()
#endif

#ifndef rtmSetParamIsMalloced
# define rtmSetParamIsMalloced(rtm, val) ()
#endif

#ifndef rtmGetPath
# define rtmGetPath(rtm)               ((rtm)->path)
#endif

#ifndef rtmSetPath
# define rtmSetPath(rtm, val)          ((rtm)->path = (val))
#endif

#ifndef rtmGetPerTaskSampleHits
# define rtmGetPerTaskSampleHits(rtm)  ()
#endif

#ifndef rtmSetPerTaskSampleHits
# define rtmSetPerTaskSampleHits(rtm, val) ()
#endif

#ifndef rtmGetPerTaskSampleHitsArray
# define rtmGetPerTaskSampleHitsArray(rtm) ((rtm)->Timing.perTaskSampleHitsArray)
#endif

#ifndef rtmSetPerTaskSampleHitsArray
# define rtmSetPerTaskSampleHitsArray(rtm, val) ((rtm)->Timing.perTaskSampleHitsArray = (val))
#endif

#ifndef rtmGetPerTaskSampleHitsPtr
# define rtmGetPerTaskSampleHitsPtr(rtm) ((rtm)->Timing.perTaskSampleHits)
#endif

#ifndef rtmSetPerTaskSampleHitsPtr
# define rtmSetPerTaskSampleHitsPtr(rtm, val) ((rtm)->Timing.perTaskSampleHits = (val))
#endif

#ifndef rtmGetPeriodicContStateIndices
# define rtmGetPeriodicContStateIndices(rtm) ((rtm)->periodicContStateIndices)
#endif

#ifndef rtmSetPeriodicContStateIndices
# define rtmSetPeriodicContStateIndices(rtm, val) ((rtm)->periodicContStateIndices = (val))
#endif

#ifndef rtmGetPeriodicContStateRanges
# define rtmGetPeriodicContStateRanges(rtm) ((rtm)->periodicContStateRanges)
#endif

#ifndef rtmSetPeriodicContStateRanges
# define rtmSetPeriodicContStateRanges(rtm, val) ((rtm)->periodicContStateRanges = (val))
#endif

#ifndef rtmGetPrevZCSigState
# define rtmGetPrevZCSigState(rtm)     ((rtm)->prevZCSigState)
#endif

#ifndef rtmSetPrevZCSigState
# define rtmSetPrevZCSigState(rtm, val) ((rtm)->prevZCSigState = (val))
#endif

#ifndef rtmGetRTWExtModeInfo
# define rtmGetRTWExtModeInfo(rtm)     ((rtm)->extModeInfo)
#endif

#ifndef rtmSetRTWExtModeInfo
# define rtmSetRTWExtModeInfo(rtm, val) ((rtm)->extModeInfo = (val))
#endif

#ifndef rtmGetRTWGeneratedSFcn
# define rtmGetRTWGeneratedSFcn(rtm)   ((rtm)->Sizes.rtwGenSfcn)
#endif

#ifndef rtmSetRTWGeneratedSFcn
# define rtmSetRTWGeneratedSFcn(rtm, val) ((rtm)->Sizes.rtwGenSfcn = (val))
#endif

#ifndef rtmGetRTWLogInfo
# define rtmGetRTWLogInfo(rtm)         ()
#endif

#ifndef rtmSetRTWLogInfo
# define rtmSetRTWLogInfo(rtm, val)    ()
#endif

#ifndef rtmGetRTWRTModelMethodsInfo
# define rtmGetRTWRTModelMethodsInfo(rtm) ()
#endif

#ifndef rtmSetRTWRTModelMethodsInfo
# define rtmSetRTWRTModelMethodsInfo(rtm, val) ()
#endif

#ifndef rtmGetRTWSfcnInfo
# define rtmGetRTWSfcnInfo(rtm)        ((rtm)->sfcnInfo)
#endif

#ifndef rtmSetRTWSfcnInfo
# define rtmSetRTWSfcnInfo(rtm, val)   ((rtm)->sfcnInfo = (val))
#endif

#ifndef rtmGetRTWSolverInfo
# define rtmGetRTWSolverInfo(rtm)      ((rtm)->solverInfo)
#endif

#ifndef rtmSetRTWSolverInfo
# define rtmSetRTWSolverInfo(rtm, val) ((rtm)->solverInfo = (val))
#endif

#ifndef rtmGetRTWSolverInfoPtr
# define rtmGetRTWSolverInfoPtr(rtm)   ((rtm)->solverInfoPtr)
#endif

#ifndef rtmSetRTWSolverInfoPtr
# define rtmSetRTWSolverInfoPtr(rtm, val) ((rtm)->solverInfoPtr = (val))
#endif

#ifndef rtmGetReservedForXPC
# define rtmGetReservedForXPC(rtm)     ((rtm)->SpecialInfo.xpcData)
#endif

#ifndef rtmSetReservedForXPC
# define rtmSetReservedForXPC(rtm, val) ((rtm)->SpecialInfo.xpcData = (val))
#endif

#ifndef rtmGetRootDWork
# define rtmGetRootDWork(rtm)          ((rtm)->dwork)
#endif

#ifndef rtmSetRootDWork
# define rtmSetRootDWork(rtm, val)     ((rtm)->dwork = (val))
#endif

#ifndef rtmGetSFunctions
# define rtmGetSFunctions(rtm)         ((rtm)->childSfunctions)
#endif

#ifndef rtmSetSFunctions
# define rtmSetSFunctions(rtm, val)    ((rtm)->childSfunctions = (val))
#endif

#ifndef rtmGetSampleHitArray
# define rtmGetSampleHitArray(rtm)     ((rtm)->Timing.sampleHitArray)
#endif

#ifndef rtmSetSampleHitArray
# define rtmSetSampleHitArray(rtm, val) ((rtm)->Timing.sampleHitArray = (val))
#endif

#ifndef rtmGetSampleHitPtr
# define rtmGetSampleHitPtr(rtm)       ((rtm)->Timing.sampleHits)
#endif

#ifndef rtmSetSampleHitPtr
# define rtmSetSampleHitPtr(rtm, val)  ((rtm)->Timing.sampleHits = (val))
#endif

#ifndef rtmGetSampleTimeArray
# define rtmGetSampleTimeArray(rtm)    ((rtm)->Timing.sampleTimesArray)
#endif

#ifndef rtmSetSampleTimeArray
# define rtmSetSampleTimeArray(rtm, val) ((rtm)->Timing.sampleTimesArray = (val))
#endif

#ifndef rtmGetSampleTimePtr
# define rtmGetSampleTimePtr(rtm)      ((rtm)->Timing.sampleTimes)
#endif

#ifndef rtmSetSampleTimePtr
# define rtmSetSampleTimePtr(rtm, val) ((rtm)->Timing.sampleTimes = (val))
#endif

#ifndef rtmGetSampleTimeTaskIDArray
# define rtmGetSampleTimeTaskIDArray(rtm) ((rtm)->Timing.sampleTimeTaskIDArray)
#endif

#ifndef rtmSetSampleTimeTaskIDArray
# define rtmSetSampleTimeTaskIDArray(rtm, val) ((rtm)->Timing.sampleTimeTaskIDArray = (val))
#endif

#ifndef rtmGetSampleTimeTaskIDPtr
# define rtmGetSampleTimeTaskIDPtr(rtm) ((rtm)->Timing.sampleTimeTaskIDPtr)
#endif

#ifndef rtmSetSampleTimeTaskIDPtr
# define rtmSetSampleTimeTaskIDPtr(rtm, val) ((rtm)->Timing.sampleTimeTaskIDPtr = (val))
#endif

#ifndef rtmGetSelf
# define rtmGetSelf(rtm)               ()
#endif

#ifndef rtmSetSelf
# define rtmSetSelf(rtm, val)          ()
#endif

#ifndef rtmGetSimMode
# define rtmGetSimMode(rtm)            ((rtm)->simMode)
#endif

#ifndef rtmSetSimMode
# define rtmSetSimMode(rtm, val)       ((rtm)->simMode = (val))
#endif

#ifndef rtmGetSimTimeStep
# define rtmGetSimTimeStep(rtm)        ((rtm)->Timing.simTimeStep)
#endif

#ifndef rtmSetSimTimeStep
# define rtmSetSimTimeStep(rtm, val)   ((rtm)->Timing.simTimeStep = (val))
#endif

#ifndef rtmGetStartTime
# define rtmGetStartTime(rtm)          ((rtm)->Timing.tStart)
#endif

#ifndef rtmSetStartTime
# define rtmSetStartTime(rtm, val)     ((rtm)->Timing.tStart = (val))
#endif

#ifndef rtmGetStepSize
# define rtmGetStepSize(rtm)           ((rtm)->Timing.stepSize)
#endif

#ifndef rtmSetStepSize
# define rtmSetStepSize(rtm, val)      ((rtm)->Timing.stepSize = (val))
#endif

#ifndef rtmGetStopRequestedFlag
# define rtmGetStopRequestedFlag(rtm)  ((rtm)->Timing.stopRequestedFlag)
#endif

#ifndef rtmSetStopRequestedFlag
# define rtmSetStopRequestedFlag(rtm, val) ((rtm)->Timing.stopRequestedFlag = (val))
#endif

#ifndef rtmGetTaskCounters
# define rtmGetTaskCounters(rtm)       ((rtm)->Timing.TaskCounters)
#endif

#ifndef rtmSetTaskCounters
# define rtmSetTaskCounters(rtm, val)  ((rtm)->Timing.TaskCounters = (val))
#endif

#ifndef rtmGetTaskTimeArray
# define rtmGetTaskTimeArray(rtm)      ((rtm)->Timing.tArray)
#endif

#ifndef rtmSetTaskTimeArray
# define rtmSetTaskTimeArray(rtm, val) ((rtm)->Timing.tArray = (val))
#endif

#ifndef rtmGetTimePtr
# define rtmGetTimePtr(rtm)            ((rtm)->Timing.t)
#endif

#ifndef rtmSetTimePtr
# define rtmSetTimePtr(rtm, val)       ((rtm)->Timing.t = (val))
#endif

#ifndef rtmGetTimingData
# define rtmGetTimingData(rtm)         ((rtm)->Timing.timingData)
#endif

#ifndef rtmSetTimingData
# define rtmSetTimingData(rtm, val)    ((rtm)->Timing.timingData = (val))
#endif

#ifndef rtmGetU
# define rtmGetU(rtm)                  ((rtm)->inputs)
#endif

#ifndef rtmSetU
# define rtmSetU(rtm, val)             ((rtm)->inputs = (val))
#endif

#ifndef rtmGetVarNextHitTimesListPtr
# define rtmGetVarNextHitTimesListPtr(rtm) ((rtm)->Timing.varNextHitTimesList)
#endif

#ifndef rtmSetVarNextHitTimesListPtr
# define rtmSetVarNextHitTimesListPtr(rtm, val) ((rtm)->Timing.varNextHitTimesList = (val))
#endif

#ifndef rtmGetY
# define rtmGetY(rtm)                  ((rtm)->outputs)
#endif

#ifndef rtmSetY
# define rtmSetY(rtm, val)             ((rtm)->outputs = (val))
#endif

#ifndef rtmGetZCCacheNeedsReset
# define rtmGetZCCacheNeedsReset(rtm)  ((rtm)->zCCacheNeedsReset)
#endif

#ifndef rtmSetZCCacheNeedsReset
# define rtmSetZCCacheNeedsReset(rtm, val) ((rtm)->zCCacheNeedsReset = (val))
#endif

#ifndef rtmGetZCSignalValues
# define rtmGetZCSignalValues(rtm)     ((rtm)->zcSignalValues)
#endif

#ifndef rtmSetZCSignalValues
# define rtmSetZCSignalValues(rtm, val) ((rtm)->zcSignalValues = (val))
#endif

#ifndef rtmGet_TimeOfLastOutput
# define rtmGet_TimeOfLastOutput(rtm)  ((rtm)->Timing.timeOfLastOutput)
#endif

#ifndef rtmSet_TimeOfLastOutput
# define rtmSet_TimeOfLastOutput(rtm, val) ((rtm)->Timing.timeOfLastOutput = (val))
#endif

#ifndef rtmGetdX
# define rtmGetdX(rtm)                 ((rtm)->derivs)
#endif

#ifndef rtmSetdX
# define rtmSetdX(rtm, val)            ((rtm)->derivs = (val))
#endif

#ifndef rtmGettimingBridge
# define rtmGettimingBridge(rtm)       ()
#endif

#ifndef rtmSettimingBridge
# define rtmSettimingBridge(rtm, val)  ()
#endif

#ifndef rtmGetChecksumVal
# define rtmGetChecksumVal(rtm, idx)   ((rtm)->Sizes.checksums[idx])
#endif

#ifndef rtmSetChecksumVal
# define rtmSetChecksumVal(rtm, idx, val) ((rtm)->Sizes.checksums[idx] = (val))
#endif

#ifndef rtmGetDWork
# define rtmGetDWork(rtm, idx)         ((rtm)->dwork[idx])
#endif

#ifndef rtmSetDWork
# define rtmSetDWork(rtm, idx, val)    ((rtm)->dwork[idx] = (val))
#endif

#ifndef rtmGetOffsetTime
# define rtmGetOffsetTime(rtm, idx)    ((rtm)->Timing.offsetTimes[idx])
#endif

#ifndef rtmSetOffsetTime
# define rtmSetOffsetTime(rtm, idx, val) ((rtm)->Timing.offsetTimes[idx] = (val))
#endif

#ifndef rtmGetSFunction
# define rtmGetSFunction(rtm, idx)     ((rtm)->childSfunctions[idx])
#endif

#ifndef rtmSetSFunction
# define rtmSetSFunction(rtm, idx, val) ((rtm)->childSfunctions[idx] = (val))
#endif

#ifndef rtmGetSampleTime
# define rtmGetSampleTime(rtm, idx)    ((rtm)->Timing.sampleTimes[idx])
#endif

#ifndef rtmSetSampleTime
# define rtmSetSampleTime(rtm, idx, val) ((rtm)->Timing.sampleTimes[idx] = (val))
#endif

#ifndef rtmGetSampleTimeTaskID
# define rtmGetSampleTimeTaskID(rtm, idx) ((rtm)->Timing.sampleTimeTaskIDPtr[idx])
#endif

#ifndef rtmSetSampleTimeTaskID
# define rtmSetSampleTimeTaskID(rtm, idx, val) ((rtm)->Timing.sampleTimeTaskIDPtr[idx] = (val))
#endif

#ifndef rtmGetVarNextHitTimeList
# define rtmGetVarNextHitTimeList(rtm, idx) ((rtm)->Timing.varNextHitTimesList[idx])
#endif

#ifndef rtmSetVarNextHitTimeList
# define rtmSetVarNextHitTimeList(rtm, idx, val) ((rtm)->Timing.varNextHitTimesList[idx] = (val))
#endif

#ifndef rtmIsContinuousTask
# define rtmIsContinuousTask(rtm, tid) 0
#endif

#ifndef rtmGetErrorStatus
# define rtmGetErrorStatus(rtm)        ((rtm)->errorStatus)
#endif

#ifndef rtmSetErrorStatus
# define rtmSetErrorStatus(rtm, val)   ((rtm)->errorStatus = (val))
#endif

#ifndef rtmIsSampleHit
# define rtmIsSampleHit(rtm, sti, tid) ((rtm)->Timing.sampleHits[(rtm)->Timing.sampleTimeTaskIDPtr[sti]])
#endif

#ifndef rtmGetStopRequested
# define rtmGetStopRequested(rtm)      ((rtm)->Timing.stopRequestedFlag)
#endif

#ifndef rtmSetStopRequested
# define rtmSetStopRequested(rtm, val) ((rtm)->Timing.stopRequestedFlag = (val))
#endif

#ifndef rtmGetStopRequestedPtr
# define rtmGetStopRequestedPtr(rtm)   (&((rtm)->Timing.stopRequestedFlag))
#endif

#ifndef rtmGetT
# define rtmGetT(rtm)                  (rtmGetTPtr((rtm))[0])
#endif

#ifndef rtmSetT
# define rtmSetT(rtm, val)                                       /* Do Nothing */
#endif

#ifndef rtmGetTFinal
# define rtmGetTFinal(rtm)             ((rtm)->Timing.tFinal)
#endif

#ifndef rtmSetTFinal
# define rtmSetTFinal(rtm, val)        ((rtm)->Timing.tFinal = (val))
#endif

#ifndef rtmGetTPtr
# define rtmGetTPtr(rtm)               ((rtm)->Timing.t)
#endif

#ifndef rtmSetTPtr
# define rtmSetTPtr(rtm, val)          ((rtm)->Timing.t = (val))
#endif

#ifndef rtmGetTStart
# define rtmGetTStart(rtm)             ((rtm)->Timing.tStart)
#endif

#ifndef rtmSetTStart
# define rtmSetTStart(rtm, val)        ((rtm)->Timing.tStart = (val))
#endif

#ifndef rtmGetTaskTime
# define rtmGetTaskTime(rtm, sti)      (rtmGetTPtr((rtm))[(rtm)->Timing.sampleTimeTaskIDPtr[sti]])
#endif

#ifndef rtmSetTaskTime
# define rtmSetTaskTime(rtm, sti, val) (rtmGetTPtr((rtm))[sti] = (val))
#endif

#ifndef rtmGetTimeOfLastOutput
# define rtmGetTimeOfLastOutput(rtm)   ((rtm)->Timing.timeOfLastOutput)
#endif

#ifdef rtmGetRTWSolverInfo
#undef rtmGetRTWSolverInfo
#endif

#define rtmGetRTWSolverInfo(rtm)       &((rtm)->solverInfo)

/* Definition for use in the target main file */
#define controller_ballcatcher_inv_kin_rtModel RT_MODEL_controller_ballcatcher_inv_kin_T

/* user code (top of header file) */
#define fflush(stdout)
#define printf(...)                    m_spSrv->TcReportLog(ADSLOG_MSGTYPE_LOG,__VA_ARGS__)

/* Block signals (default storage) */
typedef struct {
  sJOJBOPbTZ83GtnQ5AHgMwC_controller_ballcatche_T expl_temp;
  sJOJBOPbTZ83GtnQ5AHgMwC_controller_ballcatche_T expl_temp_m;
  robot_model robot_model_f;           /* '<Root>/Robot Model' */
  real_T d[49];
  Marker BusConversion_InsertedFor_BallPointSelection_at;
  real_T v[9];
  real_T t_in;                         /* '<Root>/Digital Clock1' */
  real_T t_in_i;                       /* '<Root>/Digital Clock' */
  real_T ManualSwitch2[3];             /* '<Root>/Manual Switch2' */
  real_T ManualSwitch7;                /* '<Root>/Manual Switch7' */
  real_T Constant;                     /* '<Root>/Constant' */
  real_T Constant4[3];                 /* '<Root>/Constant4' */
  real_T Chart2_sfcn_o1;               /* '<S3>/Chart2_sfcn' */
  real_T Chart2_sfcn_o2[3];            /* '<S3>/Chart2_sfcn' */
  real_T Chart2_sfcn_o3[3];            /* '<S3>/Chart2_sfcn' */
  real_T Chart2_sfcn_o4[2];            /* '<S3>/Chart2_sfcn' */
  real_T Chart2_sfcn_o5;               /* '<S3>/Chart2_sfcn' */
  real_T Chart2_sfcn_o6;               /* '<S3>/Chart2_sfcn' */
  real_T Chart2_sfcn_o7;               /* '<S3>/Chart2_sfcn' */
  real_T Chart2_sfcn_o8;               /* '<S3>/Chart2_sfcn' */
  real_T Switch[3];                    /* '<Root>/Switch' */
  real_T Switch1[3];                   /* '<Root>/Switch1' */
  real_T Switch3;                      /* '<Root>/Switch3' */
  real_T Switch2[2];                   /* '<Root>/Switch2' */
  real_T Switch4;                      /* '<Root>/Switch4' */
  real_T Subtract[7];                  /* '<S9>/Subtract' */
  real_T pd[3];                        /* '<S11>/Parabola Estimator' */
  real_T pd_p[3];                      /* '<S11>/Parabola Estimator' */
  real_T use_pred;                     /* '<S11>/Parabola Estimator' */
  real_T t_catch_predict[2];           /* '<S11>/Parabola Estimator' */
  real_T prediction_update;            /* '<S11>/Parabola Estimator' */
  real_T q_d[7];                       /* '<Root>/Trajectory Generator' */
  real_T update_index;                 /* '<Root>/Trajectory Generator' */
  real_T theta_slow[7];                /* '<S9>/f_theta_slow' */
  real_T theta_p_slow[7];              /* '<S9>/f_theta_p_slow' */
  real_T tau_slow[7];                  /* '<S9>/f_tau_slow' */
  real_T tau_p_slow[7];                /* '<S9>/f_tau_p_slow' */
  real_T alpha[7];
  real_T b_x[7];
  real_T q_p[7];
  real_T b_m[7];
  uint8_T expl_temp_tmp_k[49];
  sDzCfTiIapKTB3mCVdDRUZC_controller_ballcatche_T estimations;
  real_T v_c[3];
  int8_T b_I[9];
  real_T x;                            /* '<Root>/Parabola' */
  real_T y;                            /* '<Root>/Parabola' */
  real_T z;                            /* '<Root>/Parabola' */
  real_T Tf[16];                       /* '<Root>/Hom. Trans. Generator' */
  int16_T expl_temp_tmp[49];
  uint16_T expl_temp_tmp_c[49];
  real_T m[12];
  real_T rot[9];
  real_T x_out;                        /* '<Root>/Ball Point Selection' */
  real_T y_out;                        /* '<Root>/Ball Point Selection' */
  real_T z_out;                        /* '<Root>/Ball Point Selection' */
  real_T t5;
  real_T t11;
  real_T t12;
  real_T t17;
  real_T t19;
  real_T t20;
  real_T t27;
  real_T t28;
  real_T t29;
  real_T t33;
  real_T t36;
  real_T t37;
  real_T t41;
  real_T t45;
  real_T t50;
  real_T t55;
  real_T t58;
  real_T t76;
  real_T t78;
  real_T t87;
  real_T t91;
  real_T t94;
  real_T t108;
  real_T t_for_est;
  real_T t_move_start;
  real_T t_start_g;
  real_T w_idx_2;
  real_T w_idx_1;
  real_T k_idx_0;
  real_T w_idx_0;
  real_T k_idx_1;
  real_T k_idx_2;
  real_T t33_tmp;
  real_T t24_tmp;
  real_T t2;
  real_T t3;
  real_T t4;
  real_T t5_b;
  real_T t7;
  real_T t8;
  real_T t9;
  real_T t10;
  real_T t11_p;
  real_T t12_c;
  real_T t14;
  real_T t15;
  real_T t16;
  real_T t17_f;
  real_T t18;
  real_T t21;
  real_T t22;
  real_T t23;
  real_T t24;
  real_T t25;
  real_T t26;
  real_T t27_g;
  real_T t28_g;
  real_T t29_m;
  real_T t31;
  real_T t32;
  real_T t33_n;
  real_T t34;
  real_T t35;
  real_T t38;
  real_T t39;
  real_T t40;
  real_T t41_p;
  real_T t42;
  real_T t43;
  real_T t45_l;
  real_T t46;
  real_T t47;
  real_T t48;
  real_T t49;
  real_T t50_j;
  real_T t51;
  real_T t52;
  real_T t53;
  real_T t54;
  real_T t56;
  real_T t57;
  real_T t58_d;
  real_T t59;
  real_T t60;
  real_T t61;
  real_T t62;
  real_T t63;
  real_T t64;
  real_T t65;
  real_T t67;
  real_T t68;
  real_T t69;
  real_T t70;
  real_T t71;
  real_T t72;
  real_T t73;
  real_T t74;
  real_T t76_g;
  real_T t77;
  real_T t78_l;
  real_T t79;
  real_T t80;
  real_T t81;
  real_T t82;
  real_T t85;
  real_T t86;
  real_T t87_d;
  real_T t89;
  real_T t91_d;
  real_T t92;
  real_T t93;
  real_T t94_l;
  real_T t95;
  real_T t96;
  real_T t97;
  real_T t98;
  real_T t99;
  real_T t100;
  real_T t101;
  real_T t102;
  real_T t105;
  real_T t106;
  real_T t107;
  real_T t108_o;
  real_T t109;
  real_T t110;
  real_T t111;
  real_T t112;
  real_T t113;
  real_T t114;
  real_T t115;
  real_T t116;
  real_T t117;
  real_T t118;
  real_T t119;
  real_T t120;
  real_T t122;
  real_T t123;
  real_T t124;
  real_T t126;
  real_T t127;
  real_T t128;
  real_T t130;
  real_T t132;
  real_T t133;
  real_T t136;
  real_T t139;
  real_T t140;
  real_T t142;
  real_T t143;
  real_T t144;
  real_T t145;
  real_T t146;
  real_T t147;
  real_T t148;
  real_T t149;
  real_T t150;
  real_T t151;
  real_T t152;
  real_T t154;
  real_T t155;
  real_T t156;
  real_T t157;
  real_T t158;
  real_T t160;
  real_T t163;
  real_T t166;
  real_T t167;
  real_T t170;
  real_T t171;
  real_T t172;
  real_T t173;
  real_T t174;
  real_T t175;
  real_T t178;
  real_T t179;
  real_T t180;
  real_T t181;
  real_T t182;
  real_T t183;
  real_T t184;
  real_T t185;
  real_T t187;
  real_T t188;
  real_T t189;
  real_T t191;
  real_T t192;
  real_T t193;
  real_T t194;
  real_T t195;
  real_T t196;
  real_T t197;
  real_T t199;
  real_T t200;
  real_T t201;
  real_T t203;
  real_T t204;
  real_T t205;
  real_T t206;
  real_T t207;
  real_T t209;
  real_T t211;
  real_T t214;
  real_T t215;
  real_T t216;
  real_T t217;
  real_T t218;
  real_T t219;
  real_T t220;
  real_T t221;
  real_T t222;
  real_T t225;
  real_T t226;
  real_T t227;
  real_T t228;
  real_T t229;
  real_T t230;
  real_T t231;
  real_T t232;
  real_T t233;
  real_T t234;
  real_T t235;
  real_T t236;
  real_T t239;
  real_T t240;
  real_T t241;
  real_T t243;
  real_T t245;
  real_T t246;
  real_T t248;
  real_T t249;
  real_T t251;
  real_T t252;
  real_T t253;
  real_T t254;
  real_T t255;
  real_T t256;
  real_T t257;
  real_T t258;
  real_T t259;
  real_T t260;
  real_T t261;
  real_T t262;
  real_T t263;
  real_T t264;
  real_T t265;
  real_T t266;
  real_T t267;
  real_T t268;
  real_T t269;
  real_T t270;
  real_T t271;
  real_T t274;
  real_T t275;
  real_T t276;
  real_T t277;
  real_T t278;
  real_T t281;
  real_T t282;
  real_T t283;
  real_T t284;
  real_T t288;
  real_T t289;
  real_T t290;
  real_T t291;
  real_T t293;
  real_T t294;
  real_T t295;
  real_T t296;
  real_T t297;
  real_T t299;
  real_T t300;
  real_T t301;
  real_T t302;
  real_T t303;
  real_T t304;
  real_T t305;
  real_T t306;
  real_T t308;
  real_T t309;
  real_T t310;
  real_T t311;
  real_T t312;
  real_T t313;
  real_T t314;
  real_T t315;
  real_T t316;
  real_T t317;
  real_T t319;
  real_T t320;
  real_T t321;
  real_T t324;
  real_T t325;
  real_T t326;
  real_T t327;
  real_T t328;
  real_T t329;
  real_T t330;
  real_T t331;
  real_T t332;
  real_T t334;
  real_T t335;
  real_T t336;
  real_T t337;
  real_T t338;
  real_T t340;
  real_T t341;
  real_T t342;
  real_T t343;
  real_T t344;
  real_T t345;
  real_T t346;
  real_T t347;
  real_T t349;
  real_T t350;
  real_T t351;
  real_T t352;
  real_T t353;
  real_T t354;
  real_T t356;
  real_T t358;
  real_T t359;
  real_T t360;
  real_T t361;
  real_T t362;
  real_T t364;
  real_T t365;
  real_T t366;
  real_T t367;
  real_T t370;
  real_T t371;
  real_T t372;
  real_T t373;
  real_T t374;
  real_T t375;
  real_T t376;
  real_T t377;
  real_T t380;
  real_T t381;
  real_T t383;
  real_T t385;
  real_T t386;
  real_T t387;
  real_T t389;
  real_T t392;
  real_T t395;
  real_T t396;
  real_T t398;
  real_T t400;
  real_T t401;
  real_T t402;
  real_T t404;
  real_T t406;
  real_T t407;
  real_T t408;
  real_T t411;
  real_T t412;
  real_T t413;
  real_T t414;
  real_T t415;
  real_T t416;
  real_T t417;
  real_T t418;
  real_T t419;
  real_T t422;
  real_T t423;
  real_T t424;
  real_T t426;
  real_T t427;
  real_T t428;
  real_T t429;
  real_T t431;
  real_T t432;
  real_T t433;
  real_T t434;
  real_T t435;
  real_T t438;
  real_T t439;
  real_T t440;
  real_T t442;
  real_T t446;
  real_T t447;
  real_T t448;
  real_T t449;
  real_T t450;
  real_T t452;
  real_T t453;
  real_T t455;
  real_T t456;
  real_T t457;
  real_T t458;
  real_T t463;
  real_T t464;
  real_T t465;
  real_T t466;
  real_T t467;
  real_T t469;
  real_T t471;
  real_T t473;
  real_T t474;
  real_T t475;
  real_T t479;
  real_T t481;
  real_T t482;
  real_T t484;
  real_T t486;
  real_T t487;
  real_T t489;
  real_T t490;
  real_T t491;
  real_T t495;
  real_T t496;
  real_T t497;
  real_T t499;
  real_T t500;
  real_T t501;
  real_T t503;
  real_T t504;
  real_T t505;
  real_T t506;
  real_T t508;
  real_T t509;
  real_T t510;
  real_T t511;
  real_T t512;
  real_T t513;
  real_T t514;
  real_T t515;
  real_T t516;
  real_T t517;
  real_T t519;
  real_T t521;
  real_T t522;
  real_T t523;
  real_T t524;
  real_T t525;
  real_T t526;
  real_T t529;
  real_T t530;
  real_T t532;
  real_T t533;
  real_T t534;
  real_T t537;
  real_T t538;
  real_T t539;
  real_T t541;
  real_T t542;
  real_T t543;
  real_T t544;
  real_T t545;
  real_T t549;
  real_T t550;
  real_T t551;
  real_T t552;
  real_T t553;
  real_T t554;
  real_T t555;
  real_T t557;
  real_T t558;
  real_T t561;
  real_T t562;
  real_T t564;
  real_T t565;
  real_T t566;
  real_T t567;
  real_T t568;
  real_T t570;
  real_T t571;
  real_T t572;
  real_T t573;
  real_T t575;
  real_T t576;
  real_T t578;
  real_T t579;
  real_T t580;
  real_T t586;
  real_T t588;
  real_T t589;
  real_T t592;
  real_T t593;
  real_T t595;
  real_T t596;
  real_T t598;
  real_T t599;
  real_T t600;
  real_T t601;
  real_T t605;
  real_T t606;
  real_T t607;
  real_T t608;
  real_T t609;
  real_T t613;
  real_T t614;
  real_T t615;
  real_T t617;
  real_T t618;
  real_T t622;
  real_T t623;
  real_T t625;
  real_T t626;
  real_T t627;
  real_T t628;
  real_T t633;
  real_T t634;
  real_T t638;
  real_T t639;
  real_T t640;
  real_T t643;
  real_T t644;
  real_T t645;
  real_T t649;
  real_T t650;
  real_T t653;
  real_T t657;
  real_T t659;
  real_T t660;
  real_T t661;
  real_T t662;
  real_T t665;
  real_T t666;
  real_T t667;
  real_T t668;
  real_T t669;
  real_T t670;
  real_T t671;
  real_T t672;
  real_T t675;
  real_T t676;
  real_T t677;
  real_T t678;
  real_T t679;
  real_T t680;
  real_T t684;
  real_T t685;
  real_T t688;
  real_T t690;
  real_T t693;
  real_T t694;
  real_T t695;
  real_T t696;
  real_T t697;
  real_T t698;
  real_T t699;
  real_T t700;
  real_T t701;
  real_T t704;
  real_T t705;
  real_T t706;
  real_T t707;
  real_T t708;
  real_T t709;
  real_T t712;
  real_T t714;
  real_T t715;
  real_T t716;
  real_T t717;
  real_T t720;
  real_T t721;
  real_T t722;
  real_T t723;
  real_T t724;
  real_T t725;
  real_T t726;
  real_T t729;
  real_T t730;
  real_T t731;
  real_T t732;
  real_T t733;
  real_T t734;
  real_T t735;
  real_T t738;
  real_T t740;
  real_T t741;
  real_T t744;
  real_T t746;
  real_T t749;
  real_T t750;
  real_T t752;
  real_T t753;
  real_T t757;
  real_T t758;
  real_T t761;
  real_T t762;
  real_T t763;
  real_T t764;
  real_T t767;
  real_T t770;
  real_T t771;
  real_T t772;
  real_T t773;
  real_T t775;
  real_T t777;
  real_T t780;
  real_T t781;
  real_T t784;
  real_T t785;
  real_T t786;
  real_T t787;
  real_T t788;
  real_T t789;
  real_T t791;
  real_T t792;
  real_T t793;
  real_T t796;
  real_T t797;
  real_T t798;
  real_T t799;
  real_T t800;
  real_T t801;
  real_T t802;
  real_T t805;
  real_T t806;
  real_T t807;
  real_T t808;
  real_T t810;
  real_T t811;
  real_T t814;
  real_T t815;
  real_T t817;
  real_T t818;
  real_T t821;
  real_T t822;
  real_T t823;
  real_T t824;
  real_T t825;
  real_T t828;
  real_T t831;
  real_T t832;
  real_T t833;
  real_T t834;
  real_T t837;
  real_T t839;
  real_T t840;
  real_T t842;
  real_T t847;
  real_T t848;
  real_T t849;
  real_T t851;
  real_T t854;
  real_T t855;
  real_T t856;
  real_T t858;
  real_T t859;
  real_T t860;
  real_T t863;
  real_T t866;
  real_T t867;
  real_T t868;
  real_T t871;
  real_T t875;
  real_T t876;
  real_T t877;
  real_T t878;
  real_T t879;
  real_T t880;
  real_T t881;
  real_T t885;
  real_T t886;
  real_T t888;
  real_T t889;
  real_T t890;
  real_T t891;
  real_T t892;
  real_T t893;
  real_T t894;
  real_T t895;
  real_T t896;
  real_T t897;
  real_T t898;
  real_T t899;
  real_T t906;
  real_T t912;
  real_T t913;
  real_T t914;
  real_T t915;
  real_T t918;
  real_T t919;
  real_T t920;
  real_T t921;
  real_T t927;
  real_T t930;
  real_T t932;
  real_T t933;
  real_T t937;
  real_T t938;
  real_T t939;
  real_T t940;
  real_T t941;
  real_T t942;
  real_T t943;
  real_T t946;
  real_T t947;
  real_T t948;
  real_T t949;
  real_T t952;
  real_T t955;
  real_T t956;
  real_T t957;
  real_T t958;
  real_T t960;
  real_T t963;
  real_T t964;
  real_T t965;
  real_T t966;
  real_T t967;
  real_T t968;
  real_T t969;
  real_T t970;
  real_T t972;
  real_T t973;
  real_T t974;
  real_T t976;
  real_T t977;
  real_T t979;
  real_T t980;
  real_T t981;
  real_T t984;
  real_T t987;
  real_T t991;
  real_T t992;
  real_T t994;
  real_T t995;
  real_T t996;
  real_T t999;
  real_T t1002;
  real_T t1003;
  real_T t1004;
  real_T t1005;
  real_T t1006;
  real_T t1008;
  real_T t1012;
  real_T t1013;
  real_T t1014;
  real_T t1015;
  real_T t1017;
  real_T t1018;
  real_T t1019;
  real_T t1020;
  real_T t1021;
  real_T t1022;
  real_T t1023;
  real_T t1026;
  real_T t1027;
  real_T t1028;
  real_T t1029;
  real_T t1030;
  real_T t1031;
  real_T t1032;
  real_T t1033;
  real_T t1034;
  real_T t1035;
  real_T t1038;
  real_T t1039;
  real_T t1040;
  real_T t1041;
  real_T t1043;
  real_T t1044;
  real_T t1045;
  real_T t1047;
  real_T t1048;
  real_T t1049;
  real_T t1051;
  real_T t1054;
  real_T t1055;
  real_T t1057;
  real_T t1059;
  real_T t1060;
  real_T t1063;
  real_T t1066;
  real_T t1069;
  real_T t1070;
  real_T t1072;
  real_T t1074;
  real_T t1076;
  real_T t1077;
  real_T t1079;
  real_T t1080;
  real_T t1081;
  real_T t1082;
  real_T t1085;
  real_T t1087;
  real_T t1089;
  real_T t1091;
  real_T t1092;
  real_T t1093;
  real_T t1096;
  real_T t1099;
  real_T t1100;
  real_T t1101;
  real_T t1103;
  real_T t1104;
  real_T t1105;
  real_T t1108;
  real_T t1110;
  real_T t1116;
  real_T t1117;
  real_T t1118;
  real_T t1119;
  real_T t1120;
  real_T t1121;
  real_T t1123;
  real_T t1124;
  real_T t1126;
  real_T t1127;
  real_T t1128;
  real_T t1130;
  real_T t1132;
  real_T t1133;
  real_T t1134;
  real_T t1136;
  real_T t1137;
  real_T t1138;
  real_T t1139;
  real_T t1140;
  real_T t1141;
  real_T t1142;
  real_T t1145;
  real_T t1147;
  real_T t1151;
  real_T t1152;
  real_T t1154;
  real_T t1155;
  real_T t1157;
  real_T t1158;
  real_T t1160;
  real_T t1163;
  real_T t1164;
  real_T t1170;
  real_T t1173;
  real_T t1175;
  real_T t1177;
  real_T t1178;
  real_T t1179;
  real_T t1181;
  real_T t1182;
  real_T t1183;
  real_T t1185;
  real_T t1186;
  real_T t1187;
  real_T t1189;
  real_T t1194;
  real_T t1195;
  real_T t1197;
  real_T t1199;
  real_T t1202;
  real_T t1204;
  real_T t1210;
  real_T t1213;
  real_T t1214;
  real_T t1216;
  real_T t1222;
  real_T t1226;
  real_T t1230;
  real_T t1232;
  real_T t1233;
  real_T t1235;
  real_T t1239;
  real_T t1240;
  real_T t1250;
  real_T t1257;
  real_T t1258;
  real_T t1259;
  real_T t1260;
  real_T t1262;
  real_T t1263;
  real_T t1269;
  real_T t1270;
  real_T t1271;
  real_T t1273;
  real_T t1274;
  real_T t1277;
  real_T t1278;
  real_T t1281;
  real_T t1283;
  real_T t1284;
  real_T t1289;
  real_T t1290;
  real_T t1292;
  real_T t1293;
  real_T t1296;
  real_T t1297;
  real_T t1298;
  real_T t1301;
  real_T t1302;
  real_T t1303;
  real_T t1304;
  real_T t1305;
  real_T t1308;
  real_T t1309;
  real_T t1314;
  real_T t1316;
  real_T t1319;
  real_T t1322;
  real_T t1326;
  real_T t1327;
  real_T t1329;
  real_T t1330;
  real_T t1331;
  real_T t1334;
  real_T t1337;
  real_T t1338;
  real_T t1339;
  real_T t1345;
  real_T t1346;
  real_T t1347;
  real_T t1348;
  real_T t1352;
  real_T t1353;
  real_T t1354;
  real_T t1359;
  real_T t1362;
  real_T t1363;
  real_T t1368;
  real_T t1369;
  real_T t1371;
  real_T t1373;
  real_T t1374;
  real_T t1378;
  real_T t1382;
  real_T t1384;
  real_T t1387;
  real_T t1389;
  real_T t1393;
  real_T t1394;
  real_T t1395;
  real_T t1397;
  real_T t1398;
  real_T t1399;
  real_T t1401;
  real_T t1403;
  real_T t1406;
  real_T t1411;
  real_T t1412;
  real_T t1416;
  real_T t1417;
  real_T t1419;
  real_T t1420;
  real_T t1423;
  real_T t1424;
  real_T t1426;
  real_T t1429;
  real_T t1431;
  real_T t1432;
  real_T t1433;
  real_T t1436;
  real_T t1437;
  real_T t1443;
  real_T t1446;
  real_T t1447;
  real_T t1451;
  real_T t1452;
  real_T t1456;
  real_T t1457;
  real_T t1458;
  real_T t1460;
  real_T t1462;
  real_T t1476;
  real_T t1484;
  real_T t1489;
  real_T t1492;
  real_T t1496;
  real_T t1503;
  real_T t1510;
  real_T t1511;
  real_T t1519;
  real_T t1520;
  real_T t1523;
  real_T t1534;
  real_T t1535;
  real_T t1540;
  real_T t1541;
  real_T t1544;
  real_T t1546;
  real_T t1551;
  real_T t1567;
  real_T t1569;
  real_T t1573;
  real_T t1578;
  real_T t1580;
  real_T t1582;
  real_T t1583;
  real_T t1586;
  real_T t1596;
  real_T t1597;
  real_T t1600;
  real_T t1601;
  real_T t1603;
  real_T t1608;
  real_T t1609;
  real_T t1616;
  real_T t1619;
  real_T t1620;
  real_T t1629;
  real_T t1639;
  real_T t1640;
  real_T t1644;
  real_T t1648;
  real_T t1663;
  real_T t1664;
  real_T t1666;
  real_T t1667;
  real_T t1668;
  real_T t1676;
  real_T t1678;
  real_T t1680;
  real_T t1681;
  real_T t1684;
  real_T t1689;
  real_T t1707;
  real_T t1709;
  real_T t1714;
  real_T t1718;
  real_T t1721;
  real_T t1724;
  real_T t1733;
  real_T t1736;
  real_T t1738;
  real_T t1739;
  real_T t1740;
  real_T t1747;
  real_T t1755;
  real_T t1757;
  real_T t1761;
  real_T t1763;
  real_T t1764;
  real_T t1774;
  real_T t1780;
  real_T t1782;
  real_T t1787;
  real_T t1788;
  real_T t1791;
  real_T t1794;
  real_T t1798;
  real_T t1799;
  real_T t1806;
  real_T t1818;
  real_T t1819;
  real_T t1822;
  real_T t1825;
  real_T t1826;
  real_T t1829;
  real_T t1831;
  real_T t1839;
  real_T t1845;
  real_T t1850;
  real_T t1853;
  real_T t1854;
  real_T t1858;
  real_T t1859;
  real_T t1861;
  real_T t1862;
  real_T t1863;
  real_T t1865;
  real_T t1871;
  real_T t1876;
  real_T t1877;
  real_T t1882;
  real_T t1884;
  real_T t1971;
  real_T t1990;
  real_T t2003;
  real_T t2009;
  real_T t2010;
  real_T t2013;
  real_T t2031;
  real_T t2032;
  real_T t2036;
  real_T t2038;
  real_T t2050;
  real_T t2052;
  real_T t2057;
  real_T t2085;
  real_T t2093;
  real_T t2097;
  real_T t2099;
  real_T t2101;
  real_T t2108;
  real_T t2110;
  real_T t2115;
  real_T t2119;
  real_T t2121;
  real_T t2122;
  real_T t2123;
  real_T t2129;
  real_T t2135;
  real_T t2137;
  real_T t2139;
  real_T t2143;
  real_T t2145;
  real_T t2147;
  real_T t2149;
  real_T t2152;
  real_T t2154;
  real_T t2155;
  real_T t2162;
  real_T t2163;
  real_T t2168;
  real_T t2169;
  real_T t2170;
  real_T t2173;
  real_T t2185;
  real_T t2189;
  int32_T unusedU1_size[2];
  boolean_T OR;                        /* '<Root>/OR' */
  boolean_T y_d;                       /* '<Root>/MATLAB Function1' */
} B_controller_ballcatcher_inv_kin_T;

/* Block states (default storage) for system '<Root>' */
typedef struct {
  sDzCfTiIapKTB3mCVdDRUZC_controller_ballcatche_T estimations_last;/* '<S11>/Parabola Estimator' */
  real_T use_pred_p;                   /* '<S11>/Parabola Estimator' */
  real_T t_catch_predict_p[2];         /* '<S11>/Parabola Estimator' */
  real_T t_zd;                         /* '<S11>/Parabola Estimator' */
  real_T i;                            /* '<S11>/Parabola Estimator' */
  real_T pd__[3];                      /* '<S11>/Parabola Estimator' */
  real_T pd_p__[3];                    /* '<S11>/Parabola Estimator' */
  real_T t_in_last;                    /* '<S11>/Parabola Estimator' */
  real_T t_cnt;                        /* '<S11>/Parabola Estimator' */
  real_T px_est_last[2];               /* '<S11>/Parabola Estimator' */
  real_T Px_last[4];                   /* '<S11>/Parabola Estimator' */
  real_T py_est_last[2];               /* '<S11>/Parabola Estimator' */
  real_T Py_last[4];                   /* '<S11>/Parabola Estimator' */
  real_T pz_est_last[2];               /* '<S11>/Parabola Estimator' */
  real_T Pz_last[4];                   /* '<S11>/Parabola Estimator' */
  real_T point_in_last[3];             /* '<S11>/Parabola Estimator' */
  real_T qf[7];                        /* '<Root>/Trajectory Generator' */
  real_T traj_update_index;            /* '<Root>/Trajectory Generator' */
  real_T x[7];                         /* '<S9>/f_theta_slow' */
  real_T x_d[7];                       /* '<S9>/f_theta_p_slow' */
  real_T x_e[7];                       /* '<S9>/f_tau_slow' */
  real_T x_d3[7];                      /* '<S9>/f_tau_p_slow' */
  real_T throw_pers;                   /* '<Root>/Parabola' */
  real_T i_g;                          /* '<Root>/Parabola' */
  real_T Tf_[16];                      /* '<Root>/Hom. Trans. Generator' */
  uint32_T Chart2_sfcn_DWORK0;         /* '<S3>/Chart2_sfcn' */
  int8_T TriggeredSubsystem_SubsysRanBC;/* '<Root>/Triggered Subsystem' */
  uint8_T Chart2_sfcn_DWORK1;          /* '<S3>/Chart2_sfcn' */
  uint8_T Chart2_sfcn_DWORK2;          /* '<S3>/Chart2_sfcn' */
  boolean_T t_catch_predict_p_not_empty;/* '<S11>/Parabola Estimator' */
  boolean_T blocked;                   /* '<S11>/Parabola Estimator' */
  boolean_T px_est_last_not_empty;     /* '<S11>/Parabola Estimator' */
  boolean_T qf_not_empty;              /* '<Root>/Trajectory Generator' */
  boolean_T x_not_empty;               /* '<S9>/f_theta_slow' */
  boolean_T x_not_empty_d;             /* '<S9>/f_theta_p_slow' */
  boolean_T x_not_empty_a;             /* '<S9>/f_tau_slow' */
  boolean_T x_not_empty_g;             /* '<S9>/f_tau_p_slow' */
} DW_controller_ballcatcher_inv_kin_T;

/* External inputs (root inport signals with default storage) */
typedef struct {
  real_T fast_sensor_torque[7];        /* '<Root>/fast_sensor_torque' */
  real_T fast_sensor_position[7];      /* '<Root>/fast_sensor_position' */
  real_T motion_enabled;               /* '<Root>/motion_enabled' */
  Marker motive_marker_input_0;        /* '<Root>/motive_marker_input_0' */
  boolean_T traj_gen_error;            /* '<Root>/traj_gen_error' */
} ExtU_controller_ballcatcher_inv_kin_T;

/* External outputs (root outports fed by signals with default storage) */
typedef struct {
  real_T q_d[7];                       /* '<Root>/q_d' */
  real_T p_d[3];                       /* '<Root>/p_d' */
  real_T parabola_points[3];           /* '<Root>/parabola_points' */
  real_T traj_update_index;            /* '<Root>/traj_update_index' */
  real_T traj_time_interval[2];        /* '<Root>/traj_time_interval' */
  real_T chart_state;                  /* '<Root>/chart_state' */
  real_T traj_reset;                   /* '<Root>/traj_reset' */
  real_T MotionEnable;                 /* '<Root>/MotionEnable' */
  real_T MotionDisable;                /* '<Root>/MotionDisable' */
  uint32_T controller_select;          /* '<Root>/controller_select' */
} ExtY_controller_ballcatcher_inv_kin_T;

/* Backward compatible GRT Identifiers */
#define rtB                            controller_ballcatcher_inv_kin_B
#define BlockIO                        B_controller_ballcatcher_inv_kin_T
#define rtU                            controller_ballcatcher_inv_kin_U
#define ExternalInputs                 ExtU_controller_ballcatcher_inv_kin_T
#define rtY                            controller_ballcatcher_inv_kin_Y
#define ExternalOutputs                ExtY_controller_ballcatcher_inv_kin_T
#define rtP                            controller_ballcatcher_inv_kin_P
#define Parameters                     P_controller_ballcatcher_inv_kin_T
#define rtDWork                        controller_ballcatcher_inv_kin_DW
#define D_Work                         DW_controller_ballcatcher_inv_kin_T

/* Parameters (default storage) */
struct P_controller_ballcatcher_inv_kin_T_ {
  struct_EZjJDERKLkL20NuEi0IGyD optitrack_data;/* Variable: optitrack_data
                                                * Referenced by: '<Root>/Parabola'
                                                */
  struct_eTge8mk2lBOxrrglSbzX9G param_robot;/* Variable: param_robot
                                             * Referenced by: '<Root>/Trajectory Generator'
                                             */
  struct_PcUEPt9FJnxk90L3HMZRgE positions;/* Variable: positions
                                           * Referenced by: '<Root>/Trajectory Generator'
                                           */
  struct_3PKqMdhV3cqvODbHdLwLIG estimator_init_struct;/* Variable: estimator_init_struct
                                                       * Referenced by: '<S11>/Parabola Estimator'
                                                       */
  struct_Blt0fm03MTggIUFP4njdpF param_controller;/* Variable: param_controller
                                                  * Referenced by: '<Root>/Parabola'
                                                  */
  struct_45Uo8IsROXGEfVnLRiCZVB timing;/* Variable: timing
                                        * Referenced by:
                                        *   '<Root>/Parabola'
                                        *   '<S11>/Parabola Estimator'
                                        */
  real_T filter_tau_p_slow_T_1[7];     /* Variable: filter_tau_p_slow_T_1
                                        * Referenced by: '<S9>/f_tau_p_slow'
                                        */
  real_T filter_tau_slow_T_1[7];       /* Variable: filter_tau_slow_T_1
                                        * Referenced by: '<S9>/f_tau_slow'
                                        */
  real_T filter_theta_p_slow_T_1[7];   /* Variable: filter_theta_p_slow_T_1
                                        * Referenced by: '<S9>/f_theta_p_slow'
                                        */
  real_T filter_theta_slow_T_1[7];     /* Variable: filter_theta_slow_T_1
                                        * Referenced by: '<S9>/f_theta_slow'
                                        */
  real_T height_of_catch;              /* Variable: height_of_catch
                                        * Referenced by: '<S11>/Parabola Estimator'
                                        */
  real_T sensor_torque_offset[7];      /* Variable: sensor_torque_offset
                                        * Referenced by: '<S9>/Constant'
                                        */
  real_T Constant21_Value;             /* Expression: 0
                                        * Referenced by: '<Root>/Constant21'
                                        */
  real_T Constant19_Value;             /* Expression: 1
                                        * Referenced by: '<Root>/Constant19'
                                        */
  real_T pd_Y0;                        /* Computed Parameter: pd_Y0
                                        * Referenced by: '<S11>/pd'
                                        */
  real_T pd_p_Y0;                      /* Computed Parameter: pd_p_Y0
                                        * Referenced by: '<S11>/pd_p'
                                        */
  real_T t_catch_pred_Y0;              /* Computed Parameter: t_catch_pred_Y0
                                        * Referenced by: '<S11>/t_catch_pred'
                                        */
  real_T use_pred_Y0;                  /* Computed Parameter: use_pred_Y0
                                        * Referenced by: '<S11>/use_pred'
                                        */
  real_T pred_update_Y0;               /* Computed Parameter: pred_update_Y0
                                        * Referenced by: '<S11>/pred_update'
                                        */
  real_T Throw_Constant_Value;         /* Expression: 0
                                        * Referenced by: '<Root>/Throw_Constant'
                                        */
  real_T Constant25_Value;             /* Expression: -0.08
                                        * Referenced by: '<Root>/Constant25'
                                        */
  real_T Constant26_Value;             /* Expression: -0.1
                                        * Referenced by: '<Root>/Constant26'
                                        */
  real_T Constant30_Value;             /* Expression: 0
                                        * Referenced by: '<Root>/Constant30'
                                        */
  real_T Constant27_Value;             /* Expression: 0
                                        * Referenced by: '<Root>/Constant27'
                                        */
  real_T Constant28_Value;             /* Expression: 0
                                        * Referenced by: '<Root>/Constant28'
                                        */
  real_T Constant29_Value;             /* Expression: 0
                                        * Referenced by: '<Root>/Constant29'
                                        */
  real_T Constant1_Value;              /* Expression: 3.6
                                        * Referenced by: '<Root>/Constant1'
                                        */
  real_T Constant17_Value;             /* Expression: 0
                                        * Referenced by: '<Root>/Constant17'
                                        */
  real_T Constant_Value;               /* Expression: 100
                                        * Referenced by: '<Root>/Constant'
                                        */
  real_T Constant4_Value[3];           /* Expression: [0.4;0;0.7]
                                        * Referenced by: '<Root>/Constant4'
                                        */
  real_T Constant2_Value;              /* Expression: 100
                                        * Referenced by: '<Root>/Constant2'
                                        */
  real_T Constant3_Value;              /* Expression: 0
                                        * Referenced by: '<Root>/Constant3'
                                        */
  real_T Constant18_Value;             /* Expression: 5
                                        * Referenced by: '<Root>/Constant18'
                                        */
  real_T MotionEnableValue_Value;      /* Expression: 0
                                        * Referenced by: '<Root>/MotionEnableValue'
                                        */
  real_T MotionDisableValue_Value;     /* Expression: 0
                                        * Referenced by: '<Root>/MotionDisableValue'
                                        */
  uint32_T RigidBodyControllerSelector_Value;/* Computed Parameter: RigidBodyControllerSelector_Value
                                              * Referenced by: '<Root>/Rigid Body Controller Selector'
                                              */
  uint8_T ManualSwitch2_CurrentSetting;/* Computed Parameter: ManualSwitch2_CurrentSetting
                                        * Referenced by: '<Root>/Manual Switch2'
                                        */
  uint8_T ManualSwitch7_CurrentSetting;/* Computed Parameter: ManualSwitch7_CurrentSetting
                                        * Referenced by: '<Root>/Manual Switch7'
                                        */
};

/* Real-time Model Data Structure */
struct tag_RTM_controller_ballcatcher_inv_kin_T {
  const char_T *path;
  const char_T *modelName;
  struct SimStruct_tag * *childSfunctions;
  const char_T *errorStatus;
  SS_SimMode simMode;
  RTWExtModeInfo *extModeInfo;
  RTWSolverInfo solverInfo;
  RTWSolverInfo *solverInfoPtr;
  void *sfcnInfo;

  /*
   * NonInlinedSFcns:
   * The following substructure contains information regarding
   * non-inlined s-functions used in the model.
   */
  struct {
    RTWSfcnInfo sfcnInfo;
    time_T *taskTimePtrs[2];
    SimStruct childSFunctions[1];
    SimStruct *childSFunctionPtrs[1];
    struct _ssBlkInfo2 blkInfo2[1];
    struct _ssSFcnModelMethods2 methods2[1];
    struct _ssSFcnModelMethods3 methods3[1];
    struct _ssSFcnModelMethods4 methods4[1];
    struct _ssStatesInfo2 statesInfo2[1];
    ssPeriodicStatesInfo periodicStatesInfo[1];
    struct _ssPortInfo2 inputOutputPortInfo2[1];
    struct {
      time_T sfcnPeriod[2];
      time_T sfcnOffset[2];
      int_T sfcnTsMap[2];
      struct _ssPortInputs inputPortInfo[7];
      struct _ssInPortUnit inputPortUnits[7];
      struct _ssInPortCoSimAttribute inputPortCoSimAttribute[7];
      real_T const *UPtrs0[1];
      real_T const *UPtrs1[3];
      real_T const *UPtrs2[1];
      real_T const *UPtrs3[1];
      real_T const *UPtrs4[1];
      real_T const *UPtrs5[1];
      real_T const *UPtrs6[3];
      struct _ssPortOutputs outputPortInfo[8];
      struct _ssOutPortUnit outputPortUnits[8];
      struct _ssOutPortCoSimAttribute outputPortCoSimAttribute[8];
      int_T oDims3[2];
      struct _ssDWorkRecord dWork[3];
      struct _ssDWorkAuxRecord dWorkAux[3];
    } Sfcn0;
  } NonInlinedSFcns;

  void *blockIO;
  const void *constBlockIO;
  void *defaultParam;
  ZCSigState *prevZCSigState;
  real_T *contStates;
  int_T *periodicContStateIndices;
  real_T *periodicContStateRanges;
  real_T *derivs;
  void *zcSignalValues;
  void *inputs;
  void *outputs;
  boolean_T *contStateDisabled;
  boolean_T zCCacheNeedsReset;
  boolean_T derivCacheNeedsReset;
  boolean_T CTOutputIncnstWithState;
  void *dwork;

  /*
   * Sizes:
   * The following substructure contains sizes information
   * for many of the model attributes such as inputs, outputs,
   * dwork, sample times, etc.
   */
  struct {
    uint32_T checksums[4];
    uint32_T options;
    int_T numContStates;
    int_T numPeriodicContStates;
    int_T numU;
    int_T numY;
    int_T numSampTimes;
    int_T numBlocks;
    int_T numBlockIO;
    int_T numBlockPrms;
    int_T numDwork;
    int_T numSFcnPrms;
    int_T numSFcns;
    int_T numIports;
    int_T numOports;
    int_T numNonSampZCs;
    int_T sysDirFeedThru;
    int_T rtwGenSfcn;
  } Sizes;

  /*
   * SpecialInfo:
   * The following substructure contains special information
   * related to other components that are dependent on RTW.
   */
  struct {
    const void *mappingInfo;
    void *xpcData;
  } SpecialInfo;

  /*
   * Timing:
   * The following substructure contains information regarding
   * the timing information for the model.
   */
  struct {
    time_T stepSize;
    uint32_T clockTick0;
    uint32_T clockTickH0;
    time_T stepSize0;
    uint32_T clockTick1;
    uint32_T clockTickH1;
    time_T stepSize1;
    struct {
      uint8_T TID[2];
    } TaskCounters;

    time_T tStart;
    time_T tFinal;
    time_T timeOfLastOutput;
    void *timingData;
    real_T *varNextHitTimesList;
    SimTimeStep simTimeStep;
    boolean_T stopRequestedFlag;
    time_T *sampleTimes;
    time_T *offsetTimes;
    int_T *sampleTimeTaskIDPtr;
    int_T *sampleHits;
    int_T *perTaskSampleHits;
    time_T *t;
    time_T sampleTimesArray[2];
    time_T offsetTimesArray[2];
    int_T sampleTimeTaskIDArray[2];
    int_T sampleHitArray[2];
    int_T perTaskSampleHitsArray[4];
    time_T tArray[2];
  } Timing;
};

/* Block parameters (default storage) */
#ifdef __cplusplus

extern "C" {

#endif

  extern P_controller_ballcatcher_inv_kin_T controller_ballcatcher_inv_kin_P;

#ifdef __cplusplus

}
#endif

/* Block signals (default storage) */
extern B_controller_ballcatcher_inv_kin_T controller_ballcatcher_inv_kin_B;

/* Block states (default storage) */
extern DW_controller_ballcatcher_inv_kin_T controller_ballcatcher_inv_kin_DW;

#ifdef __cplusplus

extern "C" {

#endif

  /* External inputs (root inport signals with default storage) */
  extern ExtU_controller_ballcatcher_inv_kin_T controller_ballcatcher_inv_kin_U;

  /* External outputs (root outports fed by signals with default storage) */
  extern ExtY_controller_ballcatcher_inv_kin_T controller_ballcatcher_inv_kin_Y;

#ifdef __cplusplus

}
#endif

#ifdef __cplusplus

extern "C" {

#endif

  /* Model entry point functions */
  extern void controller_ballcatcher_inv_kin_initialize(void);
  extern void controller_ballcatcher_inv_kin_output(void);
  extern void controller_ballcatcher_inv_kin_update(void);
  extern void controller_ballcatcher_inv_kin_terminate(void);

#ifdef __cplusplus

}
#endif

/*====================*
 * External functions *
 *====================*/
#ifdef __cplusplus

extern "C" {

#endif

  extern controller_ballcatcher_inv_kin_rtModel *controller_ballcatcher_inv_kin
    (void);
  extern void MdlInitializeSizes(void);
  extern void MdlInitializeSampleTimes(void);
  extern void MdlInitialize(void);
  extern void MdlStart(void);
  extern void MdlOutputs(int_T tid);
  extern void MdlUpdate(int_T tid);
  extern void MdlTerminate(void);

#ifdef __cplusplus

}
#endif

/* Real-time Model object */
#ifdef __cplusplus

extern "C" {

#endif

  extern RT_MODEL_controller_ballcatcher_inv_kin_T *const
    controller_ballcatcher_inv_kin_M;

#ifdef __cplusplus

}
#endif

/*-
 * The generated code includes comments that allow you to trace directly
 * back to the appropriate location in the model.  The basic format
 * is <system>/block_name, where system is the system number (uniquely
 * assigned by Simulink) and block_name is the name of the block.
 *
 * Use the MATLAB hilite_system command to trace the generated code back
 * to the model.  For example,
 *
 * hilite_system('<S3>')    - opens system 3
 * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3
 *
 * Here is the system hierarchy for this model
 *
 * '<Root>' : 'controller_ballcatcher_inv_kin'
 * '<S1>'   : 'controller_ballcatcher_inv_kin/Ball Point Selection'
 * '<S2>'   : 'controller_ballcatcher_inv_kin/Chart1'
 * '<S3>'   : 'controller_ballcatcher_inv_kin/Chart2'
 * '<S4>'   : 'controller_ballcatcher_inv_kin/Hom. Trans. Generator'
 * '<S5>'   : 'controller_ballcatcher_inv_kin/MATLAB Function'
 * '<S6>'   : 'controller_ballcatcher_inv_kin/MATLAB Function1'
 * '<S7>'   : 'controller_ballcatcher_inv_kin/Parabola'
 * '<S8>'   : 'controller_ballcatcher_inv_kin/Robot Model'
 * '<S9>'   : 'controller_ballcatcher_inv_kin/Sensor Filters'
 * '<S10>'  : 'controller_ballcatcher_inv_kin/Trajectory Generator'
 * '<S11>'  : 'controller_ballcatcher_inv_kin/Triggered Subsystem'
 * '<S12>'  : 'controller_ballcatcher_inv_kin/Chart1/estimate_parabola'
 * '<S13>'  : 'controller_ballcatcher_inv_kin/Chart1/estimate_parabola/Parabola Estimator'
 * '<S14>'  : 'controller_ballcatcher_inv_kin/Chart2/__InputSSForSFun__'
 * '<S15>'  : 'controller_ballcatcher_inv_kin/Chart2/__OutputSSForSFun__'
 * '<S16>'  : 'controller_ballcatcher_inv_kin/Sensor Filters/f_tau_p_slow'
 * '<S17>'  : 'controller_ballcatcher_inv_kin/Sensor Filters/f_tau_slow'
 * '<S18>'  : 'controller_ballcatcher_inv_kin/Sensor Filters/f_theta_p_slow'
 * '<S19>'  : 'controller_ballcatcher_inv_kin/Sensor Filters/f_theta_slow'
 * '<S20>'  : 'controller_ballcatcher_inv_kin/Triggered Subsystem/Parabola Estimator'
 */
#endif                                 /* RTW_HEADER_controller_ballcatcher_inv_kin_h_ */
